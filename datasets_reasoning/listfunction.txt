0.903 2 c102 the input
(𝜆 x x)
[4, 72, 68, 63, 97] → [4, 72, 68, 63, 97]
[79, 50, 92, 5, 8, 91, 27, 2, 43] → [79, 50, 92, 5, 8, 91, 27, 2, 43]
[26, 86, 51] → [26, 86, 51]
[0, 75, 58, 55] → [0, 75, 58, 55]
[36, 57, 94, 1, 87, 38] → [36, 57, 94, 1, 87, 38]
0.874 12 c170 remove all but element 1 and last element
(𝜆 x (cons (first x) (singleton (last x))))
[15, 4, 87, 8, 64, 14] → [15, 14]
[90, 35, 8, 1, 5, 6, 21, 70, 48, 51] → [90, 51]
[57, 74, 80, 40, 60, 25, 0, 52] → [57, 52]
[44, 3, 19, 58, 50, 38, 29, 39, 2] → [44, 2]
[56, 72, 9, 32, 7, 11, 30] → [56, 30]
0.873 6 c121 remove all but last element
(𝜆 x (singleton (last x)))
[90, 80, 31, 14, 50] → [50]
[11, 79, 83] → [83]
[17, 59, 64, 22] → [22]
[65, 43, 10, 73, 3, 51, 56, 8, 0, 2] → [2]
[26, 24, 7, 85, 54, 52] → [52]
0.868 2 c045 the input
(𝜆 x x)
[1, 1, 2, 0] → [1, 1, 2, 0]
[0] → [0]
[8, 8] → [8, 8]
[ ] → [ ]
[5, 7, 9, 1, 3, 6, 4, 8, 2] → [5, 7, 9, 1, 3, 6, 4, 8, 2]
0.855 15 c072 repeat every element 2 times in order of appearance
(𝜆 x (flatten (map (𝜆 y (cons y (singleton y))) x)))
[1, 3, 3, 7] → [1, 1, 3, 3, 3, 3, 7, 7]
[6, 9, 2, 8, 0, 5] → [6, 6, 9, 9, 2, 2, 8, 8, 0, 0, 5, 5]
[9] → [9, 9]
[4, 4, 4] → [4, 4, 4, 4, 4, 4]
[5, 6, 4, 8, 9, 7, 3] → [5, 5, 6, 6, 4, 4, 8, 8, 9, 9, 7, 7, 3, 3]
0.853 13 c151 repeat each element, M, M times, in order of appearance
(𝜆 x (flatten (map (𝜆 y (repeat y y)) x)))
[2, 1, 3, 5, 0] → [2, 2, 1, 3, 3, 3, 5, 5, 5, 5, 5]
[3, 4, 2, 0] → [3, 3, 3, 4, 4, 4, 4, 2, 2]
[3] → [3, 3, 3]
[0, 1, 1] → [1, 1]
[1, 0] → [1]
0.841 4 c080 elements in reverse order
(𝜆 x (reverse x))
[0, 5, 5, 5] → [5, 5, 5, 0]
[6, 7, 9, 1, 4, 8, 2, 0, 2, 3] → [3, 2, 0, 2, 8, 4, 1, 9, 7, 6]
[6, 3, 1] → [1, 3, 6]
[0, 7] → [7, 0]
[9, 5, 3, 0, 7, 4, 7, 1, 6] → [6, 1, 7, 4, 7, 0, 3, 5, 9]
0.836 6 c061 remove all but the last element
(𝜆 x (singleton (last x)))
[9, 3, 2, 4] → [4]
[1, 7, 5, 6, 9, 8] → [8]
[4, 3] → [3]
[2, 0, 1] → [1]
[6, 6] → [6]
0.833 12 c189 count from the smallest element to the largest element
(𝜆 x (range (min x) 1 (max x)))
[2, 7, 6, 8, 4] → [2, 3, 4, 5, 6, 7, 8]
[69, 65, 65, 65] → [65, 66, 67, 68, 69]
[98, 98, 98, 98] → [98]
[10, 5, 10, 9, 4, 6, 4] → [4, 5, 6, 7, 8, 9, 10]
[0, 0, 4, 3, 1, 5, 0, 1] → [0, 1, 2, 3, 4, 5]
0.823 8 c050 prepend element 1
(𝜆 x (cons (first x) x))
[2, 4, 9, 3] → [2, 2, 4, 9, 3]
[0, 4, 8, 4, 0] → [0, 0, 4, 8, 4, 0]
[6, 6, 9, 7, 5, 9] → [6, 6, 6, 9, 7, 5, 9]
[3, 7] → [3, 3, 7]
[5] → [5, 5]
0.818 6 c048 remove all but element 1
(𝜆 x (take 1 x))
[6, 4, 7, 9] → [6]
[4, 8, 6] → [4]
[3, 3, 3] → [3]
[2, 2] → [2]
[1, 9, 9, 5, 5] → [1]
0.811 16 c147 each element, followed by its original index
(𝜆 x (flatten (mapi (𝜆 y (𝜆 z (cons z (singleton y)))) x)))
[88, 93, 73, 54, 79] → [88, 1, 93, 2, 73, 3, 54, 4, 79, 5]
[11, 0, 85, 98] → [11, 1, 0, 2, 85, 3, 98, 4]
[62, 53, 21] → [62, 1, 53, 2, 21, 3]
[90, 33] → [90, 1, 33, 2]
[68, 49, 92, 75, 8, 17, 40] → [68, 1, 49, 2, 92, 3, 75, 4, 8, 5, 17, 6, 40, 7]
0.806 6 c120 remove all but first element
(𝜆 x (singleton (first x)))
[74, 1, 93, 44, 5] → [74]
[52, 27, 13, 3, 0, 60, 51, 80, 21] → [52]
[19, 54] → [19]
[46, 7, 84, 59, 89, 6, 2] → [46]
[62, 4, 98, 65, 42, 22] → [62]
0.793 6 c127 remove last element
(𝜆 x (droplast 1 x))
[74, 12, 59, 87, 7] → [74, 12, 59, 87]
[9, 28, 91] → [9, 28]
[30, 36, 65, 95, 2, 4, 23, 93, 6, 73] → [30, 36, 65, 95, 2, 4, 23, 93, 6]
[45, 71, 78, 34, 3, 89, 67, 10, 96] → [45, 71, 78, 34, 3, 89, 67, 10]
[90, 83, 81, 1, 58, 88] → [90, 83, 81, 1, 58]
0.792 4 c100 reversed input
(𝜆 x (reverse x))
[31, 0, 51, 90] → [90, 51, 0, 31]
[6, 1, 9, 13, 70, 66, 8, 40, 7] → [7, 40, 8, 66, 70, 13, 9, 1, 6]
[5, 2] → [2, 5]
[64, 64, 97] → [97, 64, 64]
[75, 4, 7, 5, 33] → [33, 5, 7, 4, 75]
0.779 9 c145 replace every element with element 1
(𝜆 x (map (𝜆 y (first x)) x))
[45, 30, 33, 4, 64] → [45, 45, 45, 45, 45]
[70, 43, 11, 75] → [70, 70, 70, 70]
[51, 46, 52, 74, 5, 72, 9] → [51, 51, 51, 51, 51, 51, 51]
[55, 22, 7, 94, 24, 60, 79, 97, 67] → [55, 55, 55, 55, 55, 55, 55, 55, 55]
[54, 2, 10, 8, 6, 95] → [54, 54, 54, 54, 54, 54]
0.778 6 c079 sum of elements
(𝜆 x (singleton (sum x)))
[0, 4, 1, 3] → [8]
[5, 0] → [5]
[1, 1, 7] → [9]
[3, 3] → [6]
[ ] → [0]
0.777 20 c043 the list [8, 2, 7, 0, 3]
(𝜆 x (cons 8 (cons 2 (cons 7 (cons 0 (singleton 3))))))
[2, 2, 2, 2] → [8, 2, 7, 0, 3]
[5, 5, 5, 5, 5] → [8, 2, 7, 0, 3]
[9, 3, 7, 8, 2, 1, 9, 0] → [8, 2, 7, 0, 3]
[5, 0, 6, 4, 5, 5, 9, 6, 4, 1] → [8, 2, 7, 0, 3]
[4, 1, 6, 4, 6, 1, 6, 3, 4] → [8, 2, 7, 0, 3]
0.773 6 c038 append 9
(𝜆 x (append x 9))
[4, 2, 2, 2] → [4, 2, 2, 2, 9]
[1, 0] → [1, 0, 9]
[6] → [6, 9]
[7, 9, 5] → [7, 9, 5, 9]
[8, 6, 4, 5, 1, 9, 8, 3] → [8, 6, 4, 5, 1, 9, 8, 3, 9]
0.77 8 c042 the list [5, 2]
(𝜆 x (cons 5 (singleton 2)))
[9, 3, 8, 0] → [5, 2]
[1, 1, 0, 7, 7] → [5, 2]
[6, 7, 3] → [5, 2]
[9, 8] → [5, 2]
[4, 4] → [5, 2]
0.766 23 c223 swap the digits of each element
(𝜆 x (map (𝜆 y (+ (* (% y 10) 10) (/ y 10))) x))
[4, 69, 95, 9, 49] → [40, 96, 59, 90, 94]
[68, 99, 24] → [86, 99, 42]
[54, 62, 9, 7, 32, 57, 45, 92, 47] → [45, 26, 90, 70, 23, 75, 54, 29, 74]
[15, 17, 25, 19] → [51, 71, 52, 91]
[18, 3, 6, 11, 58, 48] → [81, 30, 60, 11, 85, 84]
0.764 6 c137 remove all occurrences of 3
(𝜆 x (cut_vals 3 x))
[8, 3, 1, 3, 3] → [8, 1]
[73, 19, 51, 99, 67, 5, 47, 4, 3] → [73, 19, 51, 99, 67, 5, 47, 4]
[5, 3, 34, 63, 38, 3] → [5, 34, 63, 38]
[44, 66, 3, 46, 2, 6, 88, 75] → [44, 66, 46, 2, 6, 88, 75]
[68, 76, 1, 3, 8, 12, 42, 0, 6, 18] → [68, 76, 1, 8, 12, 42, 0, 6, 18]
0.76 17 c238 keep only elements that appear exactly once
(𝜆 x (filter (𝜆 y (== 1 (count (== y) x))) x))
[8, 0, 5, 12, 0, 2] → [8, 5, 12, 2]
[8, 19, 7, 8, 8, 8, 7, 7, 7, 7] → [19]
[0, 1, 18, 9, 9, 0, 15, 6, 1] → [18, 15, 6]
[0, 17, 4, 8, 4, 10, 1] → [0, 17, 8, 10, 1]
[5, 3, 1, 6, 6, 3, 4, 4] → [5, 1]
0.758 6 c108 sum of elements
(𝜆 x (singleton (sum x)))
[9, 6, 15, 3, 43] → [76]
[ ] → [0]
[12, 15, 7, 10, 8, 29] → [81]
[39, 23, 34] → [96]
[24, 46] → [70]
0.758 6 c126 remove element 1
(𝜆 x (drop 1 x))
[39, 52, 17, 56, 10] → [52, 17, 56, 10]
[42, 5, 82, 8, 16, 19, 99, 3] → [5, 82, 8, 16, 19, 99, 3]
[80, 0, 88, 30, 7, 15, 55] → [0, 88, 30, 7, 15, 55]
[36, 73, 54] → [73, 54]
[4, 24, 81, 64, 14, 70, 13, 32, 2, 9] → [24, 81, 64, 14, 70, 13, 32, 2, 9]
0.756 10 c187 concatenate input with itself, separated by 0
(𝜆 x (concat x (cons 0 x)))
[83, 90, 11, 35, 5] → [83, 90, 11, 35, 5, 0, 83, 90, 11, 35, 5]
[53, 73] → [53, 73, 0, 53, 73]
[77, 7, 22] → [77, 7, 22, 0, 77, 7, 22]
[89, 50, 2, 95] → [89, 50, 2, 95, 0, 89, 50, 2, 95]
[16] → [16, 0, 16]
0.752 8 c022 insert a 5 as element 2
(𝜆 x (insert 5 2 x))
[6, 5, 3, 3] → [6, 5, 5, 3, 3]
[8, 4, 4, 4, 8, 4] → [8, 5, 4, 4, 4, 8, 4]
[1, 1] → [1, 5, 1]
[0, 2, 6] → [0, 5, 2, 6]
[1, 9, 0, 9, 1] → [1, 5, 9, 0, 9, 1]
0.75 18 c212 insert 3 at index 3, 3 times
(𝜆 x (splice (cons 3 (cons 3 (singleton 3))) 3 x))
[5, 9, 7, 80, 82] → [5, 9, 3, 3, 3, 7, 80, 82]
[6, 54, 74, 26, 8, 95] → [6, 54, 3, 3, 3, 74, 26, 8, 95]
[59, 96, 98, 25, 87, 86, 4] → [59, 96, 3, 3, 3, 98, 25, 87, 86, 4]
[72, 15, 39] → [72, 15, 3, 3, 3, 39]
[2, 65, 53, 68] → [2, 65, 3, 3, 3, 53, 68]
0.748 42 c101 the list [11,19, 24, 33, 42, 5, 82, 0, 64, 9]
(𝜆 x (cons 11 (cons 19 (cons 24 (cons 33 (cons 42 (cons 5 (cons 82 (cons 0 (cons 64 (cons 9 empty)))))))))))
[2, 67, 32, 46, 12] → [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]
[77, 51, 8, 27, 39, 7, 4, 92, 2, 71] → [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]
[36, 86, 78, 66, 6, 1, 70, 72] → [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]
[37, 47, 3, 74, 20, 20, 3] → [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]
[31, 80, 97, 98, 85, 60] → [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]
0.744 8 c021 insert an 8 as element 2
(𝜆 x (insert 8 2 x))
[1, 6, 9, 3] → [1, 8, 6, 9, 3]
[7, 4] → [7, 8, 4]
[0, 2, 3] → [0, 8, 2, 3]
[7, 9, 1, 2, 6, 3, 0, 4, 7, 5] → [7, 8, 9, 1, 2, 6, 3, 0, 4, 7, 5]
[0, 8, 6, 4, 0] → [0, 8, 8, 6, 4, 0]
0.744 16 c105 concatenate all but the last element with all but the first element
(𝜆 x (splice (drop 1 (droplast 1 x)) 2 x))
[31, 40, 16, 44, 73] → [31, 40, 16, 44, 40, 16, 44, 73]
[5, 1, 10, 24] → [5, 1, 10, 1, 10, 24]
[26, 25, 85, 7, 94, 46] → [26, 25, 85, 7, 94, 25, 85, 7, 94, 46]
[45, 62, 96, 4, 79, 57] → [45, 62, 96, 4, 79, 62, 96, 4, 79, 57]
[6, 35, 75] → [6, 35, 35, 75]
0.74 4 c041 the list [9]
(𝜆 x (singleton 9))
[7, 3, 6, 4] → [9]
[8, 7, 5, 5, 1, 6] → [9]
[ ] → [9]
[2, 2] → [9]
[0] → [9]
0.738 6 c070 concatenate input with itself
(𝜆 x (concat x x))
[3, 2, 0, 9] → [3, 2, 0, 9, 3, 2, 0, 9]
[7, 1, 1, 2, 1, 2] → [7, 1, 1, 2, 1, 2, 7, 1, 1, 2, 1, 2]
[7] → [7, 7]
[0, 8, 4, 3, 6, 8, 4] → [0, 8, 4, 3, 6, 8, 4, 0, 8, 4, 3, 6, 8, 4]
[5, 5] → [5, 5, 5, 5]
0.736 8 c052 repeat element 1 ten times
(𝜆 x (repeat (first x) 10))
[9, 8, 7, 1] → [9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
[2, 5, 5] → [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[4, 0, 6, 7, 3, 5, 1, 6, 3] → [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[6, 7, 1] → [6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
[0] → [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
0.723 40 c044 the list [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]
(𝜆 x (cons 1 (cons 9 (cons 4 (cons 3 (cons 2 (cons 5 (cons 8 (cons 0 (cons 4 (singleton 9)))))))))))
[2, 7, 7, 3] → [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]
[6, 6, 6] → [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]
[0, 0, 1, 6, 1, 6, 1] → [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]
[ ] → [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]
[7] → [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]
0.717 12 c190 count by 2 from the first element to the last element
(𝜆 x (range (first x) 2 (last x)))
[46, 19, 96, 58, 58] → [46, 48, 50, 52, 54, 56, 58]
[2, 8, 1, 14, 7, 4, 61, 0, 6] → [2, 4, 6]
[66, 3, 6, 46, 82, 88, 17, 1, 93, 76] → [66, 68, 70, 72, 74, 76]
[8, 92, 0, 2, 94, 41, 14] → [8, 10, 12, 14]
[24, 4, 32] → [24, 26, 28, 30, 32]
0.717 6 c037 append 3
(𝜆 x (append x 3))
[2, 0, 6, 0] → [2, 0, 6, 0, 3]
[9, 9] → [9, 9, 3]
[3, 1, 7] → [3, 1, 7, 3]
[4, 4, 5, 5, 4, 4, 5, 4] → [4, 4, 5, 5, 4, 4, 5, 4, 3]
[2, 6, 9, 6, 7, 1] → [2, 6, 9, 6, 7, 1, 3]
0.716 9 c222 replace each element with the input length
(𝜆 x (map (𝜆 y (length x)) x))
[34, 83, 11, 82, 31] → [5, 5, 5, 5, 5]
[74, 59, 14, 50] → [4, 4, 4, 4]
[25] → [1]
[58, 80] → [2, 2]
[22, 92, 28] → [3, 3, 3]
0.714 4 c107 unique elements
(𝜆 x (unique x))
[87, 87, 17, 17, 17, 87] → [87, 17]
[3, 92, 18, 6, 49, 49, 1, 38, 80] → [3, 92, 18, 6, 49, 1, 38, 80]
[68, 68, 68, 68, 68, 68, 68, 68, 68, 68] → [68]
[89, 89, 89, 36, 55, 14, 7, 14] → [89, 36, 55, 14, 7]
[81, 69, 85, 81, 69, 74, 0, 24, 74, 61] → [81, 69, 85, 74, 0, 24, 61]
0.713 8 c011 elements 2 through 4
(𝜆 x (slice 2 4 x))
[6, 1, 3, 0, 4, 9] → [1, 3, 0]
[7, 2, 4, 2, 4, 7, 2, 2, 4] → [2, 4, 2]
[6, 8, 6, 9, 9, 8, 8, 6] → [8, 6, 9]
[1, 1, 4, 0, 3, 1, 3, 5, 0] → [1, 4, 0]
[5, 8, 5, 8, 3, 8, 7, 3, 7] → [8, 5, 8]
0.712 6 c104 maximum element
(𝜆 x (singleton (max x)))
[5, 26, 31, 76, 89] → [89]
[9, 42, 54, 18, 83, 7, 34] → [83]
[4, 24, 58, 93, 28, 60, 2, 0, 22, 8] → [93]
[48, 47] → [48]
[63, 46, 6] → [63]
0.706 11 c192 replace each element, M, with its tens digit
(𝜆 x (map (𝜆 y (/ y 10)) x))
[31, 14, 3, 18, 32] → [3, 1, 0, 1, 3]
[61, 40, 77, 2] → [6, 4, 7, 0]
[92, 47, 62] → [9, 4, 6]
[13] → [1]
[45, 58] → [4, 5]
0.706 16 c182 keep every third element
(𝜆 x (filteri (𝜆 y (𝜆 z (== (% y 3) 0))) x))
[64, 6, 85, 21, 47, 46, 60, 4, 7] → [85, 46, 7]
[56, 12, 39, 29, 71, 2, 1, 55, 9, 93] → [39, 2, 9]
[20, 92, 79, 36, 7, 34, 26, 25, 1] → [79, 34, 1]
[41, 67, 38, 84, 14, 80, 99, 91, 23, 8] → [38, 80, 23]
[42, 77, 3, 57, 5, 0, 79, 13, 83, 4] → [3, 0, 83]
0.701 6 c006 the first 2 elements
(𝜆 x (take 2 x))
[7, 8, 5, 7] → [7, 8]
[3, 1, 1, 1, 3, 1, 1] → [3, 1]
[8, 0, 8, 7, 4, 0, 4] → [8, 0]
[2, 0, 4, 6, 5] → [2, 0]
[9, 9, 9] → [9, 9]
0.701 6 c046 prepend 7
(𝜆 x (cons 7 x))
[8, 8, 5, 5] → [7, 8, 8, 5, 5]
[ ] → [7]
[9] → [7, 9]
[1, 4] → [7, 1, 4]
[3, 8, 6, 7, 0, 3, 4] → [7, 3, 8, 6, 7, 0, 3, 4]
0.7 7 c106 elements in ascending order
(𝜆 x (sort (𝜆 y y) x))
[36, 86, 2, 97, 10] → [2, 10, 36, 86, 97]
[50, 94, 0, 83, 77, 71, 5, 3, 57, 8] → [0, 3, 5, 8, 50, 57, 71, 77, 83, 94]
[85, 26, 7, 23, 48, 39] → [7, 23, 26, 39, 48, 85]
[89, 4, 21, 35, 78, 96, 11, 90, 47] → [4, 11, 21, 35, 47, 78, 89, 90, 96]
[68, 1, 44, 93] → [1, 44, 68, 93]
0.699 8 c114 prepend the last element
(𝜆 x (cons (last x) x))
[86, 84, 60, 20, 21] → [21, 86, 84, 60, 20, 21]
[10, 4, 51, 57] → [57, 10, 4, 51, 57]
[67, 72] → [72, 67, 72]
[35, 49, 2, 45, 46, 92, 9, 6, 58] → [58, 35, 49, 2, 45, 46, 92, 9, 6, 58]
[55, 5, 56] → [56, 55, 5, 56]
0.694 8 c093 repeat element 1 ten times
(𝜆 x (repeat (first x) 10))
[94, 36, 57, 91] → [94, 94, 94, 94, 94, 94, 94, 94, 94, 94]
[93, 7, 37, 90, 0, 99, 6, 6] → [93, 93, 93, 93, 93, 93, 93, 93, 93, 93]
[62] → [62, 62, 62, 62, 62, 62, 62, 62, 62, 62]
[19, 5, 2, 76, 61, 5, 43, 1, 20] → [19, 19, 19, 19, 19, 19, 19, 19, 19, 19]
[4, 63, 0, 58, 61, 9, 0, 1, 85, 8] → [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
0.693 32 c195 element 1, followed by 23, 68, 42, 99, 71, followed by last element
(𝜆 x (cons (first x) (cons 23 (cons 68 (cons 42 (cons 99 (cons 71 (singleton (last x)))))))))
[1, 72, 24, 78, 31] → [1, 23, 68, 42, 99, 71, 31]
[6, 61, 57, 53, 51, 95, 26] → [6, 23, 68, 42, 99, 71, 26]
[79, 7, 54, 1, 38, 84] → [79, 23, 68, 42, 99, 71, 84]
[64, 41, 89, 75, 63, 40, 2, 43, 21, 9] → [64, 23, 68, 42, 99, 71, 9]
[56, 55, 17, 46, 94, 50, 29, 5, 0] → [56, 23, 68, 42, 99, 71, 0]
0.693 30 c196 concatenate [17, 38, 82], input, and [1, 55, 27]
(𝜆 x (concat (cons 17 (cons 38 (singleton 82))) (concat x (cons 1 (cons 55 (singleton 27))))))
[90, 0, 19, 94, 8] → [17, 38, 82, 90, 0, 19, 94, 8, 1, 55, 27]
[24, 49, 53] → [17, 38, 82, 24, 49, 53, 1, 55, 27]
[86, 77] → [17, 38, 82, 86, 77, 1, 55, 27]
[51, 52, 91, 9] → [17, 38, 82, 51, 52, 91, 9, 1, 55, 27]
[15] → [17, 38, 82, 15, 1, 55, 27]
0.692 10 c095 remove the first and last elements
(𝜆 x (drop 1 (droplast 1 x)))
[8, 97, 65, 9, 54, 97] → [97, 65, 9, 54]
[16, 51, 51, 16, 16, 0, 0, 85, 51, 9] → [51, 51, 16, 16, 0, 0, 85, 51]
[6, 21, 6, 59, 6, 59, 6, 12, 12] → [21, 6, 59, 6, 59, 6, 12]
[56, 39, 5, 5, 2, 24, 24] → [39, 5, 5, 2, 24]
[46, 46, 46, 46, 32, 32, 32, 46] → [46, 46, 46, 32, 32, 32]
0.689 8 c016 replace element 2 with an 8
(𝜆 x (replace 2 8 x))
[1, 1, 0, 2] → [1, 8, 0, 2]
[6, 1, 2, 4, 3, 5, 3, 9, 0, 7] → [6, 8, 2, 4, 3, 5, 3, 9, 0, 7]
[5, 5, 5] → [5, 8, 5]
[8, 1, 9, 6, 0, 7, 5] → [8, 8, 9, 6, 0, 7, 5]
[9, 2] → [9, 8]
0.687 16 c224 the last element, followed by element 1, followed by the second to last element, followed by element 2, and so on
(𝜆 x (fold (𝜆 y (𝜆 z (cons z (reverse y)))) empty x))
[80, 31, 6, 69, 38] → [38, 6, 80, 31, 69]
[29, 17, 49, 99, 41, 93, 0, 2, 5, 3] → [3, 2, 93, 99, 17, 29, 49, 41, 0, 5]
[68, 4, 34, 17, 24, 85, 82, 7, 52] → [52, 82, 24, 34, 68, 4, 17, 85, 7]
[87, 73, 92, 8] → [8, 73, 87, 92]
[10, 65, 16, 45, 97, 22, 30] → [30, 97, 16, 10, 65, 45, 22]
0.682 12 c116 reflect the input on itself
(𝜆 x (concat (reverse (drop 1 x)) x))
[52, 72, 4, 18, 70] → [70, 18, 4, 72, 52, 72, 4, 18, 70]
[48, 47, 27] → [27, 47, 48, 47, 27]
[67, 23, 25, 54] → [54, 25, 23, 67, 23, 25, 54]
[31, 2, 68, 11, 5, 65, 81, 28] → [28, 81, 65, 5, 11, 68, 2, 31, 2, 68, 11, 5, 65, 81, 28]
[64, 66] → [66, 64, 66]
0.682 8 c140 replace element 2 with a 9
(𝜆 x (replace 2 9 x))
[75, 78, 54, 76, 56] → [75, 9, 54, 76, 56]
[35, 24, 0, 8, 51, 42, 60, 20, 4] → [35, 9, 0, 8, 51, 42, 60, 20, 4]
[16, 31, 77, 74, 38, 23] → [16, 9, 77, 74, 38, 23]
[7, 2, 0, 6, 67, 64, 5, 30, 95, 70] → [7, 9, 0, 6, 67, 64, 5, 30, 95, 70]
[25, 48, 96, 89] → [25, 9, 96, 89]
0.679 6 c049 remove element 1
(𝜆 x (drop 1 x))
[3, 3, 3, 3] → [3, 3, 3]
[7, 1, 4, 1, 0, 8] → [1, 4, 1, 0, 8]
[1, 0, 9, 0, 2] → [0, 9, 0, 2]
[4, 9, 7, 6, 6, 4, 5] → [9, 7, 6, 6, 4, 5]
[2] → [ ]
0.678 11 c071 add 2 to every element
(𝜆 x (map (𝜆 y (+ 2 y)) x))
[0, 0, 7, 0] → [2, 2, 9, 2]
[6, 7, 7, 6, 1, 4, 2, 6, 5] → [8, 9, 9, 8, 3, 6, 4, 8, 7]
[6] → [8]
[5, 5] → [7, 7]
[1, 4, 3, 6, 0] → [3, 6, 5, 8, 2]
0.678 22 c161 replace each element, M, with M + the input length - M’s index
(𝜆 x (mapi (𝜆 y (𝜆 z (+ z (- (length x) y)))) x))
[75, 25, 38, 55, 91, 26] → [80, 29, 41, 57, 92, 26]
[5, 30, 2, 9, 3, 19, 92, 15] → [12, 36, 7, 13, 6, 21, 93, 15]
[38, 10, 66, 49, 50, 8, 61, 59, 64] → [46, 17, 72, 54, 54, 11, 63, 60, 64]
[11, 19, 0, 31, 40, 16, 78] → [17, 24, 4, 34, 42, 17, 78]
[89, 4, 7, 8, 82, 3, 9, 45, 38, 94] → [98, 12, 14, 14, 87, 7, 12, 47, 39, 94]
0.675 24 c068 concatenate input and [7, 3, 8, 4, 3]
(𝜆 x (concat x (cons 7 (cons 3 (cons 8 (cons 4 (singleton 3)))))))
[8, 0, 8, 0] → [8, 0, 8, 0, 7, 3, 8, 4, 3]
[5, 5, 4, 7, 4, 7, 5, 4] → [5, 5, 4, 7, 4, 7, 5, 4, 7, 3, 8, 4, 3]
[0] → [0, 7, 3, 8, 4, 3]
[ ] → [7, 3, 8, 4, 3]
[6, 2, 1, 6, 2, 1] → [6, 2, 1, 6, 2, 1, 7, 3, 8, 4, 3]
0.675 6 c103 input length
(𝜆 x (singleton (length x)))
[38, 51, 18, 72, 13] → [5]
[ ] → [0]
[83] → [1]
[73, 91, 96, 60, 61, 42, 2, 6, 33] → [9]
[90, 93, 81, 3, 57, 69, 21] → [7]
0.673 6 c001 remove all but element 3
(𝜆 x (singleton (third x)))
[2, 4, 3, 2] → [3]
[9, 6, 9, 8, 6] → [9]
[0, 0, 0, 0, 0] → [0]
[8, 1, 8] → [8]
[5, 7, 5, 7, 5] → [5]
0.67 20 c090 the list [18, 42, 77, 20, 36]
(𝜆 x (cons 18 (cons 42 (cons 77 (cons 20 (singleton 36))))))
[79, 85, 85, 85] → [18, 42, 77, 20, 36]
[33, 33] → [18, 42, 77, 20, 36]
[92, 2, 2, 7, 9, 84, 52, 5, 6, 41] → [18, 42, 77, 20, 36]
[2, 34, 96, 49, 83, 41, 35, 4, 39, 97] → [18, 42, 77, 20, 36]
[89, 68, 4, 3, 68, 76, 80, 6] → [18, 42, 77, 20, 36]
0.667 38 c097 concatenate [11, 21, 43, 19], input, and [7, 89, 0, 57]
(𝜆 x (concat (cons 11 (cons 21 (cons 43 (singleton 19)))) (concat x (cons 7 (cons 89 (cons 0(singleton 57)))))))
[6, 59, 33, 33] → [11, 21, 43, 19, 6, 59, 33, 33, 7, 89, 0, 57]
[2, 87, 9, 99, 62, 4] → [11, 21, 43, 19, 2, 87, 9, 99, 62, 4, 7, 89, 0, 57]
[39, 87] → [11, 21, 43, 19, 39, 87, 7, 89, 0, 57]
[91] → [11, 21, 43, 19, 91, 7, 89, 0, 57]
[ ] → [11, 21, 43, 19, 7, 89, 0, 57]
0.665 23 c142 every digit in order of appearance
(𝜆 x (flatten (map (𝜆 y (cons (/ y 10) (singleton (% y 10)))) x)))
[77, 63, 83, 97, 58] → [7, 7, 6, 3, 8, 3, 9, 7, 5, 8]
[47, 54] → [4, 7, 5, 4]
[95, 60, 15, 52] → [9, 5, 6, 0, 1, 5, 5, 2]
[33] → [3, 3]
[70, 2, 92, 13, 22, 19] → [7, 0, 0, 2, 9, 2, 1, 3, 2, 2, 1, 9]
0.661 40 c091 the list [81, 99, 41, 23, 22, 75, 68, 30, 24, 69]
(𝜆 x (cons 81 (cons 99 (cons 41 (cons 23 (cons 22 (cons 75 (cons 68 (cons 30 (cons 24 (singleton 69)))))))))))
[3, 88, 88] → [81, 99, 41, 23, 22, 75, 68, 30, 24, 69]
[ ] → [81, 99, 41, 23, 22, 75, 68, 30, 24, 69]
[6] → [81, 99, 41, 23, 22, 75, 68, 30, 24, 69]
[61, 1, 59, 4, 5, 35, 48, 27, 9] → [81, 99, 41, 23, 22, 75, 68, 30, 24, 69]
[72, 58, 56, 49, 40, 7, 25, 1] → [81, 99, 41, 23, 22, 75, 68, 30, 24, 69]
0.659 8 c034 swap elements 2 and 3
(𝜆 x (swap 2 3 x))
[1, 9, 1, 4] → [1, 1, 9, 4]
[7, 1, 8, 6, 3, 5, 9, 4] → [7, 8, 1, 6, 3, 5, 9, 4]
[6, 1, 2, 7, 4] → [6, 2, 1, 7, 4]
[9, 0, 2] → [9, 2, 0]
[3, 1, 4, 2, 6, 5, 9, 7, 0, 8] → [3, 4, 1, 2, 6, 5, 9, 7, 0, 8]
0.657 13 c244 number of 3s
(𝜆 x (singleton (count (𝜆 y (== 3 y)) x)))
[52, 3, 3, 3, 3, 3, 52] → [5]
[3, 3, 3, 3, 3, 14, 14, 3, 14] → [6]
[28, 79, 1, 3, 55, 42, 70, 60, 7, 67] → [1]
[92, 11, 94, 7, 2, 1, 18, 8, 89, 5] → [0]
[3, 43, 3, 3, 27, 3, 7, 69] → [4]
0.655 26 c171 cumulative sum of elements
(𝜆 x (drop 1 (fold (𝜆 y (𝜆 z (append y (+ (last y) z)))) (singleton 0) x)))
[2, 9, 17, 9, 17, 4] → [2, 11, 28, 37, 54, 58]
[7, 7, 8, 3, 4, 4, 5, 0] → [7, 14, 22, 25, 29, 33, 38, 38]
[5, 7, 2, 6, 1, 0, 9] → [5, 12, 14, 20, 21, 21, 30]
[5, 0, 4, 15, 5, 7, 6, 15, 2, 7] → [5, 5, 9, 24, 29, 36, 42, 57, 59, 66]
[7, 7, 2, 7, 11, 0, 16, 16, 7] → [7, 14, 16, 23, 34, 34, 50, 66, 73]
0.651 26 c172 cumulative product of elements
(𝜆 x (drop 1 (fold (𝜆 y (𝜆 z (append y (* (last y) z)))) (singleton 1) x)))
[4, 2, 2, 2] → [4, 8, 16, 32]
[5, 2, 7] → [5, 10, 70]
[4, 1, 1, 4, 1, 4, 1] → [4, 4, 4, 16, 16, 64, 64]
[7, 9] → [7, 63]
[2, 2, 2, 3, 3, 1] → [2, 4, 8, 24, 72, 72]
0.65 6 c062 remove the last element
(𝜆 x (droplast 1 x))
[2, 5, 2, 7] → [2, 5, 2]
[8] → [ ]
[7, 6, 0, 7, 3] → [7, 6, 0, 7]
[9, 9] → [9]
[1, 3, 8, 5, 7, 6, 0, 9, 2, 4] → [1, 3, 8, 5, 7, 6, 0, 9, 2]
0.647 10 c096 prepend 98 and append 37
(𝜆 x (cons 98 (append x 37)))
[20, 70, 38, 80] → [98, 20, 70, 38, 80, 37]
[3, 3] → [98, 3, 3, 37]
[ ] → [98, 37]
[8, 8, 1, 89, 85, 7, 49] → [98, 8, 8, 1, 89, 85, 7, 49, 37]
[6] → [98, 6, 37]
0.644 6 c081 remove all but element 3
(𝜆 x (singleton (third x)))
[40, 50, 76, 47, 39] → [76]
[9, 81, 6, 81, 6] → [6]
[9, 91, 70, 48, 59, 83, 43] → [70]
[27, 4, 38, 83, 5, 3, 15, 4, 5, 83] → [38]
[45, 45, 45] → [45]
0.641 6 c109 product of elements
(𝜆 x (singleton (product x)))
[5, 1, 1, 1, 3] → [15]
[6, 6] → [36]
[ ] → [1]
[4, 3, 2, 3] → [72]
[7, 14, 1] → [98]
0.636 18 c002 remove all but element 3
(𝜆 x (if (> 3 (length x)) empty (singleton (third x))))
[0, 5] → [ ]
[5, 6, 1, 3, 2, 0, 7, 8, 9, 4] → [1]
[6, 7, 8, 1, 4, 3, 0, 5, 9, 2] → [8]
[7, 4, 3, 9, 5, 8, 2, 1, 6] → [3]
[4, 6] → [ ]
0.636 6 c132 remove element 3
(𝜆 x (cut_idx 3 x))
[8, 0, 3, 56, 95] → [8, 0, 56, 95]
[93, 5, 51, 24, 11, 7, 44] → [93, 5, 24, 11, 7, 44]
[27, 20, 19, 63, 13, 64] → [27, 20, 63, 13, 64]
[15, 57, 70, 35] → [15, 57, 35]
[1, 43, 23, 65, 4, 6, 28, 2, 10, 40] → [1, 43, 65, 4, 6, 28, 2, 10, 40]
0.636 24 c153 each unique element followed by its number of occurrences, in order of appearance
(𝜆 x (flatten (map (𝜆 y (append (take 1 y) (length y))) (group (𝜆 z z) x))))
[23, 23, 23, 27, 27] → [23, 3, 27, 2]
[1, 95, 95, 41, 41, 1, 35, 95, 35] → [1, 2, 95, 3, 41, 2, 35, 2]
[39, 39] → [39, 2]
[0, 0, 97, 97, 25, 25] → [0, 2, 97, 2, 25, 2]
[78, 99, 50, 5, 90, 5, 78, 90, 50, 99] → [78, 2, 99, 2, 50, 2, 5, 2, 90, 2]
0.63 12 c051 prepend element 1 five times
(𝜆 x (concat (repeat (first x) 5) x))
[9, 9, 9, 9] → [9, 9, 9, 9, 9, 9, 9, 9, 9]
[4, 1] → [4, 4, 4, 4, 4, 4, 1]
[5, 7, 0, 7, 3, 5, 8] → [5, 5, 5, 5, 5, 5, 7, 0, 7, 3, 5, 8]
[8] → [8, 8, 8, 8, 8, 8]
[2, 4, 5, 1, 3, 6, 8, 0] → [2, 2, 2, 2, 2, 2, 4, 5, 1, 3, 6, 8, 0]
0.63 10 c225 remove first and last two elements
(𝜆 x (drop 2 (droplast 2 x)))
[8, 28, 97, 66, 46] → [97]
[53, 95, 39, 49, 62, 74, 5, 4] → [39, 49, 62, 74]
[11, 87, 44, 41, 6, 27] → [44, 41]
[2, 40, 29, 81, 54, 48, 76, 15, 8, 80] → [29, 81, 54, 48, 76, 15]
[13, 38, 91, 64, 16, 0, 5] → [91, 64, 16]
0.629 22 c067 swap the first and last elements
(𝜆 x (cons (last x) (append (drop 1 (droplast 1 x)) (first x))))
[4, 8, 9, 9] → [9, 8, 9, 4]
[5, 0, 7, 6, 6, 0, 6, 0] → [0, 0, 7, 6, 6, 0, 6, 5]
[4, 7] → [7, 4]
[2, 1, 6, 3, 4, 0, 9, 8, 7, 4] → [4, 1, 6, 3, 4, 0, 9, 8, 7, 2]
[1, 3, 2, 8, 8, 5, 5] → [5, 3, 2, 8, 8, 5, 1]
0.626 10 c112 count from 1 to the last element
(𝜆 x (range 1 1 (last x)))
[25, 0, 22, 48, 7] → [1, 2, 3, 4, 5, 6, 7]
[2, 66, 71, 42, 29, 99, 95, 81, 19, 3] → [1, 2, 3]
[5, 26, 75, 4, 97, 32, 73, 59, 1] → [1]
[9, 10] → [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[76, 61, 15, 74, 77, 6, 2] → [1, 2]
0.624 6 c030 remove the last two elements
(𝜆 x (droplast 2 x))
[6, 4, 8, 1, 0] → [6, 4, 8]
[9, 7, 4, 3, 8, 1] → [9, 7, 4, 3]
[2, 5, 7, 8, 2, 2, 9, 3, 1, 0] → [2, 5, 7, 8, 2, 2, 9, 3]
[5, 4, 5, 0] → [5, 4]
[6, 2, 9, 7, 8, 3, 8, 5, 0] → [6, 2, 9, 7, 8, 3, 8]
0.622 17 c149 replace each element, M, with M * element 1; remove element 1
(𝜆 x (map (𝜆 y (* y (first x))) (drop 1 x)))
[5, 2, 13, 6, 3] → [10, 65, 30, 15]
[3, 33] → [99]
[9] → [ ]
[8, 2, 6, 9] → [16, 48, 72]
[6, 3, 1] → [18, 6]
0.615 12 c148 count from 1 to each original element, in order of appearance
(𝜆 x (flatten (map (range 1 1) x)))
[2, 5, 1, 4, 1] → [1, 2, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 1]
[3, 3, 2] → [1, 2, 3, 1, 2, 3, 1, 2]
[5, 4] → [1, 2, 3, 4, 5, 1, 2, 3, 4]
[3, 0, 5, 2] → [1, 2, 3, 1, 2, 3, 4, 5, 1, 2]
[5] → [1, 2, 3, 4, 5]
0.609 8 c017 replace element 2 with an 8 if there is an element 2
(𝜆 x (replace 2 8 x))
[9, 1, 7, 7] → [9, 8, 7, 7]
[9, 2, 1, 6, 4, 0] → [9, 8, 1, 6, 4, 0]
[0] → [0]
[1, 4, 2, 5, 3, 9, 7, 2] → [1, 8, 2, 5, 3, 9, 7, 2]
[0, 2, 2] → [0, 8, 2]
0.604 22 c092 concatenate [92, 63, 34, 18, 55] with input
(𝜆 x (cons 92 (cons 63 (cons 34 (cons 18 (cons 55 x))))))
[97, 45, 97, 8] → [92, 63, 34, 18, 55, 97, 45, 97, 8]
[7, 87, 87, 87, 5, 11] → [92, 63, 34, 18, 55, 7, 87, 87, 87, 5, 11]
[8, 54, 84, 7, 9, 94, 3, 40, 6] → [92, 63, 34, 18, 55, 8, 54, 84, 7, 9, 94, 3, 40, 6]
[1] → [92, 63, 34, 18, 55, 1]
[66, 66] → [92, 63, 34, 18, 55, 66, 66]
0.601 6 c077 input length
(𝜆 x (singleton (length x)))
[1, 7, 2, 0] → [4]
[8, 6, 6] → [3]
[2] → [1]
[8, 3, 9, 5, 7] → [5]
[ ] → [0]
0.6 6 c098 add the index to every element
(𝜆 x (mapi + x))
[40, 52, 40, 50] → [41, 54, 43, 54]
[0, 0, 8, 8, 8, 8] → [1, 2, 11, 12, 13, 14]
[62, 4, 8, 85, 68, 9, 62, 85] → [63, 6, 11, 89, 73, 15, 69, 93]
[18, 5, 79, 21, 0, 47, 91] → [19, 7, 82, 25, 5, 53, 98]
[87, 56, 7, 56, 72, 33, 36, 57, 87, 7] → [88, 58, 10, 60, 77, 39, 43, 65, 96, 17]
0.6 42 c248 elements after the last 0
(𝜆 x (first (fold (𝜆 y (𝜆 z (if (== z 0) (cons empty y) (cons (append (first y) z) (drop 1 y))))) (singleton empty) x)))
[9, 0, 4, 8, 0, 2, 46, 96, 30] → [2, 46, 96, 30]
[97, 0, 46, 8, 89, 0, 17, 3, 17, 7] → [17, 3, 17, 7]
[0, 1, 5, 1, 32, 5, 41, 5, 0, 87] → [87]
[70, 6, 11, 0, 37, 9, 9, 0, 13, 54] → [13, 54]
[86, 7, 99, 0, 99, 0, 3, 4, 38] → [3, 4, 38]
0.599 21 c199 elements in ascending order, each preceded by its rank
(𝜆 x (flatten (zip (range 1 1 (length x)) (sort (𝜆 y y) x))))
[59, 22, 86, 64, 25] → [1, 22, 2, 25, 3, 59, 4, 64, 5, 86]
[72, 69, 74, 27] → [1, 27, 2, 69, 3, 72, 4, 74]
[6, 99, 46, 0, 96, 49, 77] → [1, 0, 2, 6, 3, 46, 4, 49, 5, 77, 6, 96, 7, 99]
[12, 81] → [1, 12, 2, 81]
[42] → [1, 42]
0.597 6 c007 remove all but the first 2 elements
(𝜆 x (take 2 x))
[0, 2, 2, 0] → [0, 2]
[ ] → [ ]
[1] → [1]
[3, 3, 1, 9, 8] → [3, 3]
[7, 8, 5] → [7, 8]
0.591 21 c176 sums of each consecutive pair of elements, in order of appearance
(𝜆 x (map (𝜆 y (sum y)) (zip (droplast 1 x) (drop 1 x))))
[22, 1, 6, 8, 51, 26] → [23, 7, 14, 59, 77]
[8, 2, 65, 9, 81, 16, 79, 3, 80, 5] → [10, 67, 74, 90, 97, 95, 82, 83, 85]
[8, 5, 28, 36, 58, 40, 0] → [13, 33, 64, 94, 98, 40]
[31, 29, 3, 19, 5, 50, 0, 76] → [60, 32, 22, 24, 55, 50, 76]
[20, 71, 5, 1, 38, 4, 93, 2, 50] → [91, 76, 6, 39, 42, 97, 95, 52]
0.588 12 c066 left-rotate by 1
(𝜆 x (append (drop 1 x) (first x)))
[5, 6, 5, 8] → [6, 5, 8, 5]
[1, 6, 6] → [6, 6, 1]
[8, 2, 4, 7, 3, 0] → [2, 4, 7, 3, 0, 8]
[7, 9, 8, 2, 5, 1, 2, 4] → [9, 8, 2, 5, 1, 2, 4, 7]
[3, 7] → [7, 3]
0.587 16 c053 replace element 2 with element 1
(𝜆 x (concat (repeat (first x) 2) (drop 2 x)))
[8, 9, 6, 4] → [8, 8, 6, 4]
[6, 5, 8, 9, 1, 3, 4, 1, 0] → [6, 6, 8, 9, 1, 3, 4, 1, 0]
[9, 3, 7, 0, 1, 5, 5, 0] → [9, 9, 7, 0, 1, 5, 5, 0]
[5] → [5, 5]
[2, 0, 2, 0, 2] → [2, 2, 2, 0, 2]
0.584 22 c047 concatenate [9, 6, 3, 8, 5] and input
(𝜆 x (cons 9 (cons 6 (cons 3 (cons 8 (cons 5 x))))))
[8, 3, 7, 9] → [9, 6, 3, 8, 5, 8, 3, 7, 9]
[4, 6, 7, 0, 7, 7, 1, 9] → [9, 6, 3, 8, 5, 4, 6, 7, 0, 7, 7, 1, 9]
[6] → [9, 6, 3, 8, 5, 6]
[ ] → [9, 6, 3, 8, 5]
[5, 2, 0, 2, 4, 0, 3, 2, 4] → [9, 6, 3, 8, 5, 5, 2, 0, 2, 4, 0, 3, 2, 4]
0.584 10 c064 remove the first and last elements
(𝜆 x (drop 1 (droplast 1 x)))
[4, 5, 0, 0] → [5, 0]
[3, 8, 3, 8, 3] → [8, 3, 8]
[4, 9, 4, 9, 4, 9, 9, 9, 9, 9] → [9, 4, 9, 4, 9, 9, 9, 9]
[5, 7, 7, 9, 8, 1, 4, 0, 6] → [7, 7, 9, 8, 1, 4, 0]
[2, 1, 1, 2, 2, 7, 2, 7] → [1, 1, 2, 2, 7, 2]
0.584 6 c078 maximum element
(𝜆 x (singleton (max x)))
[2, 3, 0, 1] → [3]
[2, 7, 9, 5, 4, 0, 8, 1, 3, 6] → [9]
[1, 0] → [1]
[7, 1, 5, 4, 0, 2, 8, 6] → [8]
[2, 5, 3, 0, 6, 4, 1] → [6]
0.584 32 c119 prepend or append 8, if necessary, so the list begins and ends with 8
(𝜆 x ((𝜆 y (concat (y first) (concat x (y last)))) (𝜆 z (if (== (z x) 8) empty (singleton 8)))))
[8, 87, 23, 25, 34] → [8, 87, 23, 25, 34, 8]
[63] → [8, 63, 8]
[47, 68, 84, 8] → [8, 47, 68, 84, 8]
[46, 77] → [8, 46, 77, 8]
[52, 7, 2, 91, 5, 75, 58, 3, 8] → [8, 52, 7, 2, 91, 5, 75, 58, 3, 8]
0.573 6 c135 remove the first 7
(𝜆 x (cut_val 7 x))
[7, 99, 63, 7, 7] → [99, 63, 7, 7]
[7, 7] → [7]
[47, 14, 45, 7, 6, 59, 48, 50, 5, 19] → [47, 14, 45, 6, 59, 48, 50, 5, 19]
[8, 38, 3, 42, 7, 78, 71] → [8, 38, 3, 42, 78, 71]
[85, 46, 84, 79, 44, 7, 1, 2, 7] → [85, 46, 84, 79, 44, 1, 2, 7]
0.571 11 c198 unique elements in descending order
(𝜆 x (reverse (sort (𝜆 y y) (unique x))))
[62, 86, 85, 62, 29, 8, 85, 29] → [86, 85, 62, 29, 8]
[26, 26, 26, 26, 10, 55, 6, 10, 55, 6] → [55, 26, 10, 6]
[18, 65, 98, 98, 98, 18, 18, 98, 65] → [98, 65, 18]
[7, 5, 5, 69, 69, 30, 30, 7, 5] → [69, 30, 7, 5]
[73, 66, 24, 52, 24, 43, 73, 24, 66, 52] → [73, 66, 52, 43, 24]
0.568 14 c219 keep only every other element, starting from the end of the list
(𝜆 x (reverse (filteri (𝜆 y (𝜆 z (is_odd y))) (reverse x))))
[42, 0, 46, 12, 8, 58, 50] → [42, 46, 8, 50]
[7, 93, 99, 86, 30, 97, 60, 62, 57, 17] → [93, 86, 97, 62, 17]
[3, 52, 78, 9, 94, 54, 90, 89, 37, 14] → [52, 9, 54, 89, 14]
[65, 2, 66, 47, 28, 71, 9, 5] → [2, 47, 71, 5]
[81, 22, 85, 82, 36, 59, 16, 8, 45] → [81, 85, 36, 16, 45]
0.566 10 c075 remove every element with an even index
(𝜆 x (filteri (𝜆 y (𝜆 z (is_odd y))) x))
[6, 5, 2, 9] → [6, 2]
[7, 3] → [7]
[0, 1, 1, 9, 2, 0, 1, 0, 9, 2] → [0, 1, 2, 1, 9]
[8, 0, 4, 2, 8] → [8, 4, 8]
[7, 4, 5, 2, 5, 5, 2] → [7, 5, 5, 2]
0.559 10 c177 interleave the input and the reversed input
(𝜆 x (flatten (zip x (reverse x))))
[64, 98, 27, 26, 32] → [64, 32, 98, 26, 27, 27, 26, 98, 32, 64]
[1, 15, 28, 4] → [1, 4, 15, 28, 28, 15, 4, 1]
[80, 2, 61, 24, 37, 8] → [80, 8, 2, 37, 61, 24, 24, 61, 37, 2, 8, 80]
[93, 50, 81] → [93, 81, 50, 50, 81, 93]
[59, 90] → [59, 90, 90, 59]
0.553 6 c025 remove element 2
(𝜆 x (cut_idx 2 x))
[1, 1, 4, 5] → [1, 4, 5]
[2, 6] → [2]
[1, 6, 6, 0, 8, 3, 9, 0, 7, 9] → [1, 6, 0, 8, 3, 9, 0, 7, 9]
[3, 0, 4, 9, 5] → [3, 4, 9, 5]
[7, 2, 5, 0, 8, 4, 1] → [7, 5, 0, 8, 4, 1]
0.552 21 c125 keep only elements whose tens digit equals the tens digit of element 1
(𝜆 x (filter (𝜆 y (== (/ (first x) 10) (/ y 10))) x))
[41, 6, 41, 27, 55, 66, 42, 3] → [41, 41, 42]
[61, 62, 9, 3, 56, 85, 64, 82, 49] → [61, 62, 64]
[5, 2, 90, 75, 57, 1, 7, 19, 8, 84] → [5, 2, 1, 7, 8]
[32, 32, 4, 3, 32, 7, 30, 96, 5] → [32, 32, 32, 30]
[99, 99, 97, 79, 16, 75, 75, 97, 16, 8] → [99, 99, 97, 97]
0.545 22 c211 reverse input; insert elements 4 and 5 so they are fourth and third from last, respectively
(𝜆 x (splice (slice 4 5 x) (- (length x) 2) (reverse x)))
[22, 1, 7, 65, 21, 77] → [77, 21, 65, 65, 21, 7, 1, 22]
[94, 72, 79, 4, 47, 46] → [46, 47, 4, 4, 47, 79, 72, 94]
[97, 59, 0, 39, 8, 48, 53, 4] → [4, 53, 48, 8, 39, 39, 8, 0, 59, 97]
[12, 5, 18, 62, 78, 28, 31, 68] → [68, 31, 28, 78, 62, 62, 78, 18, 5, 12]
[49, 6, 23, 92, 45, 36, 75] → [75, 36, 45, 92, 92, 45, 23, 6, 49]
0.54 8 c087 swap elements 2 and 3
(𝜆 x (swap 2 3 x))
[36, 77, 25, 3, 1] → [36, 25, 77, 3, 1]
[21, 94, 56, 2, 0, 0, 21, 94] → [21, 56, 94, 2, 0, 0, 21, 94]
[26, 71, 7, 31, 5, 21, 55, 4, 87] → [26, 7, 71, 31, 5, 21, 55, 4, 87]
[72, 88, 72, 88, 45, 88, 72, 85, 45, 79] → [72, 72, 88, 88, 45, 88, 72, 85, 45, 79]
[0, 9, 0, 68, 68, 9] → [0, 0, 9, 68, 68, 9]
0.539 8 c013 elements 3 through 7
(𝜆 x (slice 3 7 x))
[8, 5, 5, 8, 8, 5, 5, 5] → [5, 8, 8, 5, 5]
[9, 9, 4, 4, 9, 3, 1, 1, 9] → [4, 4, 9, 3, 1]
[6, 4, 2, 4, 0, 0, 8, 7, 5] → [2, 4, 0, 0, 8]
[3, 2, 0, 3, 4, 4, 6, 6] → [0, 3, 4, 4, 6]
[9, 8, 7, 4, 1, 3, 2, 0, 6, 5] → [7, 4, 1, 3, 2]
0.534 38 c069 concatenate [9, 3, 4, 0], input, and [7, 2, 9, 1]
(𝜆 x (concat (cons 9 (cons 3 (cons 4 (singleton 0)))) (concat x (cons 7 (cons 2 (cons 9 (singleton 1)))))))
[0, 5, 5, 5] → [9, 3, 4, 0, 0, 5, 5, 5, 7, 2, 9, 1]
[ ] → [9, 3, 4, 0, 7, 2, 9, 1]
[8, 4, 7] → [9, 3, 4, 0, 8, 4, 7, 7, 2, 9, 1]
[8] → [9, 3, 4, 0, 8, 7, 2, 9, 1]
[7, 1] → [9, 3, 4, 0, 7, 1, 7, 2, 9, 1]
0.534 14 c117 left-rotate by three elements
(𝜆 x (concat (drop 3 x) (take 3 x)))
[77, 90, 44, 9, 84] → [9, 84, 77, 90, 44]
[57, 0, 17, 95, 1, 94, 68, 31, 46] → [95, 1, 94, 68, 31, 46, 57, 0, 17]
[20, 6, 21, 56, 79, 8] → [56, 79, 8, 20, 6, 21]
[23, 5, 42, 7, 52, 74, 25] → [7, 52, 74, 25, 23, 5, 42]
[2, 81, 92, 80] → [80, 2, 81, 92]
0.531 18 c228 replace each element with the number of occurrences of that element so far in the input
(𝜆 x (mapi (𝜆 y (𝜆 z (count (== z) (take y x)))) x))
[42, 22, 22, 42, 42] → [1, 1, 2, 2, 3]
[11, 11, 6, 11, 11, 6, 6, 6] → [1, 2, 1, 3, 4, 2, 3, 4]
[80, 80, 80, 80] → [1, 2, 3, 4]
[84, 84, 84] → [1, 2, 3]
[58, 58] → [1, 2]
0.53 13 c197 replace each element with the number of occurrences of that element
(𝜆 x (map (𝜆 y (count (== y) x)) x))
[43, 43, 19, 72, 73] → [2, 2, 1, 1, 1]
[23, 53, 46, 79, 41, 0, 51, 41, 16, 93] → [1, 1, 1, 1, 2, 1, 1, 2, 1, 1]
[70, 70, 70, 70, 42, 42] → [4, 4, 4, 4, 2, 2]
[27, 74, 27, 74, 64, 74, 27, 74, 74] → [3, 5, 3, 5, 1, 5, 3, 5, 5]
[8, 80, 80] → [1, 2, 2]
0.527 10 c065 prepend 9 and append 7
(𝜆 x (cons 9 (append x 7)))
[1, 0, 0, 8] → [9, 1, 0, 0, 8, 7]
[2, 2, 8] → [9, 2, 2, 8, 7]
[ ] → [9, 7]
[7] → [9, 7, 7]
[1, 3, 1, 5, 6, 4, 4, 3, 8] → [9, 1, 3, 1, 5, 6, 4, 4, 3, 8, 7]
0.524 14 c156 reverse the input and add each element to its new index
(𝜆 x (mapi (𝜆 y (𝜆z (+ z y))) (reverse x)))
[38, 61, 56, 17, 51, 4] → [5, 53, 20, 60, 66, 44]
[28, 7, 69, 5, 55, 18, 83, 71, 46] → [47, 73, 86, 22, 60, 11, 76, 15, 37]
[2, 33, 39, 42, 8, 7, 1, 64] → [65, 3, 10, 12, 47, 45, 40, 10]
[37, 23, 94, 5, 27, 72, 0] → [1, 74, 30, 9, 99, 29, 44]
[6, 48, 13, 78, 18, 88, 30, 86, 62, 21] → [22, 64, 89, 34, 93, 24, 85, 21, 57, 16]
0.523 11 c110 three largest elements in ascending order
(𝜆 x (takelast 3 (sort (𝜆 y y) x)))
[97, 7, 13, 2, 55] → [13, 55, 97]
[18, 35, 7, 70, 96, 74, 37, 45] → [70, 74, 96]
[45, 92, 5, 40, 3, 78, 81, 50, 4, 76] → [78, 81, 92]
[85, 89, 8, 7, 9, 44, 30, 68, 69] → [69, 85, 89]
[57, 15, 51, 31, 33, 61, 6] → [51, 57, 61]
0.521 11 c233 number of occurrences of each unique element, in order of appearance
(𝜆 x (map length (group (𝜆 y y) x)))
[2, 82, 82, 52, 87, 41, 87] → [1, 2, 1, 2, 1]
[4, 63, 9, 68, 62, 67, 9, 22, 56] → [1, 1, 2, 1, 1, 1, 1, 1]
[34, 34, 34, 34, 34, 34, 34, 34, 34, 34] → [10]
[71, 17, 71, 71, 71, 17, 71, 17] → [5, 3]
[33, 55, 84, 84, 64, 33, 55, 64, 6, 18] → [2, 2, 2, 2, 1, 1]
0.519 8 c003 remove all but element 7
(𝜆 x (singleton (nth 7 x)))
[7, 2, 3, 9, 0, 4, 5, 6] → [5]
[6, 1, 6, 4, 4, 7, 0, 4, 6, 1] → [0]
[0, 5, 7, 4, 9, 1, 3, 6, 7, 8] → [3]
[6, 8, 5, 0, 2, 9, 8, 2] → [8]
[1, 0, 8, 6, 7, 2, 9, 3, 5, 4] → [9]
0.519 12 c230 count by 2 from the smallest element to the largest element
(𝜆 x (range (min x) 2 (max x)))
[8, 6, 7, 12, 2] → [2, 4, 6, 8, 10, 12]
[44, 48] → [44, 46, 48]
[5, 1, 7] → [1, 3, 5, 7]
[16, 6, 9, 4] → [4, 6, 8, 10, 12, 14, 16]
[78, 86] → [78, 80, 82, 84, 86]
0.515 8 c122 remove all but penultimate element
(𝜆 x (singleton (second (reverse x))))
[22, 46, 27, 2, 89] → [2]
[77, 4, 57] → [4]
[80, 70] → [80]
[9, 26, 65, 71, 33, 5, 67, 3, 40, 56] → [40]
[98, 55, 32, 41, 8, 93, 11, 44, 88] → [44]
0.514 10 c020 replace the first element with the last element
(𝜆 x (replace 1 (last x) x))
[7, 7, 7, 9] → [9, 7, 7, 9]
[8, 7, 6, 8, 9, 4, 3] → [3, 7, 6, 8, 9, 4, 3]
[9, 9, 2, 3, 3, 3, 2, 1, 1] → [1, 9, 2, 3, 3, 3, 2, 1, 1]
[8, 9, 7, 2, 7, 0] → [0, 9, 7, 2, 7, 0]
[8, 5] → [5, 5]
0.506 46 c235 count up and down between elements
(𝜆 x (fold (𝜆 y (𝜆 z (concat y (drop 1 (range (last y) (if (> z (last y)) 1 -1) z))))) (take 1 x) (drop 1 x)))
[8, 7, 5, 6, 15] → [8, 7, 6, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
[46, 43, 42] → [46, 45, 44, 43, 42]
[0, 4, 7, 6] → [0, 1, 2, 3, 4, 5, 6, 7, 6]
[1, 5, 7] → [1, 2, 3, 4, 5, 6, 7]
[6, 9] → [6, 7, 8, 9]
0.503 19 c157 each element followed by 0 if even or 1 if odd, in order of appearance
(𝜆 x (flatten (map (𝜆 y (cons y (singleton (% y 2)))) x)))
[32, 3, 5, 81, 16, 6] → [32, 0, 3, 1, 5, 1, 81, 1, 16, 0, 6, 0]
[63, 18, 24, 92, 44, 89, 30] → [63, 1, 18, 0, 24, 0, 92, 0, 44, 0, 89, 1, 30, 0]
[74, 71, 15, 46, 26, 59] → [74, 0, 71, 1, 15, 1, 46, 0, 26, 0, 59, 1]
[78, 94, 6, 90, 7, 77, 79] → [78, 0, 94, 0, 6, 0, 90, 0, 7, 1, 77, 1, 79, 1]
[96, 28, 95, 6, 4, 57, 9] → [96, 0, 28, 0, 95, 1, 6, 0, 4, 0, 57, 1, 9, 1]
0.5 26 c185 replace the sublist between the first and last elements with its sum
(𝜆 x (cons (first x) (cons (sum (drop 1 (droplast 1 x))) (takelast 1 x))))
[41, 9, 5, 45, 30, 89] → [41, 89, 89]
[65, 0, 2, 23, 7, 21, 5, 3, 74] → [65, 61, 74]
[16, 19, 36, 12, 4, 6, 8, 2, 0, 23] → [16, 87, 23]
[53, 3, 1, 4, 26, 41, 35] → [53, 75, 35]
[81, 29, 31, 15, 7, 9, 4, 47] → [81, 95, 47]
0.5 11 c213 three smallest elements in ascending order
(𝜆 x (take 3 (sort (𝜆 y y) x)))
[16, 25, 95, 44, 39] → [16, 25, 39]
[58, 7, 48, 1, 43, 8, 3, 84, 53, 0] → [0, 1, 3]
[62, 5, 41, 7, 68, 65, 3, 32, 18] → [3, 5, 7]
[83, 23, 2, 52, 61, 59] → [2, 23, 52]
[86, 19, 21, 17, 40, 45, 13] → [13, 17, 19]
0.495 16 c184 keep only odd elements with an even index
(𝜆 x (filteri (𝜆 y (𝜆 z (and (is_even y) (is_odd z)))) x))
[6, 91, 0, 77, 18, 25] → [91, 77, 25]
[19, 45, 91, 1, 70, 33, 0, 81, 47, 73] → [45, 1, 33, 81, 73]
[82, 7, 87, 9, 2, 31, 67] → [7, 9, 31]
[54, 97, 49, 5, 6, 35, 2, 1, 78] → [97, 5, 35, 1]
[4, 75, 8, 63, 18, 3, 51, 7] → [75, 63, 3, 7]
0.492 12 c155 multiply each element by its index
(𝜆 x (mapi (𝜆 y (𝜆 z (* z y))) x))
[2, 0, 6, 0, 3, 2] → [2, 0, 18, 0, 15, 12]
[3, 7, 9, 8, 0, 6, 1, 2] → [3, 14, 27, 32, 0, 36, 7, 16]
[5, 5, 10, 5, 6, 4, 5] → [5, 10, 30, 20, 30, 24, 35]
[2, 4, 2, 1, 0, 2, 9, 1, 7, 6] → [2, 8, 6, 4, 0, 12, 63, 8, 63, 60]
[9, 3, 3, 5, 8, 0, 7, 4, 2] → [9, 6, 9, 20, 40, 0, 49, 32, 18]
0.49 18 c082 remove all but element 3
(𝜆 x (if (> 3 (length x)) empty (singleton (third x))))
[10, 6, 2, 99, 0] → [2]
[15] → [ ]
[18, 79, 7, 5, 3, 7, 3, 5, 79] → [7]
[96, 40] → [ ]
[91, 75, 3, 6, 8, 42, 11, 4, 1, 60] → [3]
0.487 16 c231 the number of occurrences of each unique element in ascending order
(𝜆 x (sort (𝜆 y y) (map length (group (𝜆 z z) x))))
[80, 5, 98, 32, 98, 80, 98] → [1, 1, 2, 3]
[92, 92, 92, 92, 21, 21, 92, 92] → [2, 6]
[78, 34, 78, 78, 34, 34, 4, 4, 34, 4] → [3, 3, 4]
[33, 31, 71, 33, 59, 64, 31, 31, 59, 7] → [1, 1, 1, 2, 2, 3]
[38, 38, 38, 38, 38, 38, 38, 38, 38] → [9]
0.485 11 c099 remove all elements whose value < 50
(𝜆 x (filter (𝜆 y (> y 49)) x))
[8, 87, 2, 64, 48, 79] → [87, 64, 79]
[1, 7, 8, 25, 0, 40, 53, 94] → [53, 94]
[78, 18, 92, 42, 95, 3, 98] → [78, 92, 95, 98]
[7, 28, 13, 8, 0, 28, 8, 28] → [ ]
[86, 5, 86, 86, 11, 99, 99, 99, 5] → [86, 86, 86, 99, 99, 99]
0.485 44 c247 elements before the first 0
(𝜆 x (first (reverse (fold (𝜆 y (𝜆 z (if (== z 0) (cons empty y) (cons (append (first y) z))(drop 1 y)))) (singleton empty) x))))
[5, 26, 7, 23, 0, 93, 0, 18, 1] → [5, 26, 7, 23]
[1, 71, 89, 0, 71, 46, 8, 87, 0, 7] → [1, 71, 89]
[9, 86, 0, 60, 69, 53, 1, 0, 6, 60] → [9, 86]
[4, 0, 80, 87, 87, 0, 45, 2, 4] → [4]
[84, 0, 20, 0, 63, 63, 20, 20, 20] → [84]
0.476 6 c008 the first 6 elements
(𝜆 x (take 6 x))
[1, 3, 9, 8, 1, 6, 7] → [1, 3, 9, 8, 1, 6]
[9, 2, 2, 6, 9, 9, 2, 9] → [9, 2, 2, 6, 9, 9]
[3, 7, 7, 0, 3, 8, 5] → [3, 7, 7, 0, 3, 8]
[0, 4, 4, 0, 9, 0, 4] → [0, 4, 4, 0, 9, 0]
[4, 0, 5, 6, 5, 0, 5] → [4, 0, 5, 6, 5, 0]
0.473 14 c055 swap elements 1 and 3 and elements 2 and 4
(𝜆 x (swap 1 3 (swap 2 4 x)))
[4, 8, 7, 9] → [7, 9, 4, 8]
[0, 2, 6, 1, 9, 5, 6, 5, 3] → [6, 1, 0, 2, 9, 5, 6, 5, 3]
[8, 1, 7, 0, 5] → [7, 0, 8, 1, 5]
[9, 4, 4, 3, 9, 9, 3, 4] → [4, 3, 9, 4, 9, 9, 3, 4]
[3, 9, 7, 2, 0, 8, 5] → [7, 2, 3, 9, 0, 8, 5]
0.462 6 c029 remove the first two elements
(𝜆 x (drop 2 x))
[8, 1, 9, 9] → [9, 9]
[2, 2] → [ ]
[5, 1, 0, 0, 5, 8, 1, 8, 3, 0] → [0, 0, 5, 8, 1, 8, 3, 0]
[6, 6, 6] → [6]
[7, 0, 4, 1, 7] → [4, 1, 7]
0.459 14 c168 count from 1 to 10, skipping the input’s length
(𝜆 x (cut_val (length x) (range 1 1 10)))
[66, 74, 88, 49, 15] → [1, 2, 3, 4, 6, 7, 8, 9, 10]
[96, 25, 43, 86, 50, 44, 13, 87, 2, 84] → [1, 2, 3, 4, 5, 6, 7, 8, 9]
[21, 85] → [1, 3, 4, 5, 6, 7, 8, 9, 10]
[98, 30, 27, 53, 7, 45, 0] → [1, 2, 3, 4, 5, 6, 8, 9, 10]
[65, 1, 69, 76, 33, 16] → [1, 2, 3, 4, 5, 7, 8, 9, 10]
0.45 6 c009 remove all but the first 6 elements
(𝜆 x (take 6 x))
[6, 2, 4, 4, 4, 8, 8] → [6, 2, 4, 4, 4, 8]
[7] → [7]
[5, 8, 8, 9, 9, 5, 8, 5] → [5, 8, 8, 9, 9, 5]
[6, 7, 0] → [6, 7, 0]
[1, 1, 1, 1] → [1, 1, 1, 1]
0.442 8 c133 remove elements 2 through 5
(𝜆 x (cut_slice 2 5 x))
[17, 65, 41, 49, 9, 5] → [17, 5]
[85, 50, 30, 14, 6, 89, 57, 77] → [85, 89, 57, 77]
[73, 3, 2, 70, 21, 87, 86, 23, 76] → [73, 87, 86, 23, 76]
[11, 2, 74, 41, 1, 10, 0] → [11, 10, 0]
[31, 47, 82, 96, 52, 98, 3, 4, 68, 61] → [31, 98, 3, 4, 68, 61]
0.435 27 c146 absolute difference of each consecutive pair, in order of appearance
(𝜆 x (map (𝜆 y (- (max y) (min y))) (zip (droplast 1 x) (drop 1 x))))
[87, 67, 47, 9, 44] → [20, 20, 38, 35]
[80, 98, 4, 25] → [18, 94, 21]
[2, 53, 31, 23, 49, 6, 16] → [51, 22, 8, 26, 43, 10]
[58, 86, 12, 66, 90, 20, 45, 64] → [28, 74, 54, 24, 70, 25, 19]
[8, 34, 17, 82, 4, 93, 5, 18, 41, 11] → [26, 17, 65, 78, 89, 88, 13, 23, 30]
0.434 20 c004 remove all but element 7
(𝜆 x (if (> 7 (length x)) empty (singleton (nth 7 x))))
[7, 4] → [ ]
[0, 3, 2, 9, 4, 6, 8, 4, 8] → [8]
[5, 6, 0, 2, 9, 7, 3, 2, 1, 8] → [3]
[9, 9] → [ ]
[5, 9, 8, 8, 5, 0, 0, 2] → [0]
0.433 15 c240 number of elements equal to the input length
(𝜆 x (singleton (count (𝜆 y (== (length x) y)) x)))
[21, 7, 7, 7, 83, 21, 29] → [3]
[8, 65, 5, 34, 8, 59, 18, 4] → [2]
[60, 24, 51, 8, 72, 9, 98, 2, 65, 1] → [0]
[0, 5, 95, 3, 7, 91, 7] → [2]
[68, 3, 94, 22, 99, 16, 93, 2, 9] → [1]
0.43 14 c239 number of repetitions in the input
(𝜆 x (singleton (- (length x) (length (unique x)))))
[86, 27, 88, 71, 54, 86, 71, 54] → [3]
[25, 37, 28, 43, 14, 14, 6, 25, 51] → [2]
[13, 84, 48, 60, 84, 60, 21, 21, 96] → [3]
[52, 44, 0, 70, 7, 77, 18, 79, 44, 67] → [1]
[75, 75, 22, 31, 9, 22, 62, 31, 12, 4] → [3]
0.429 8 c246 number of unique elements
(𝜆 x (singleton (length (unique x))))
[76, 5, 19, 22, 19, 3, 9] → [6]
[98, 64, 57, 6, 45, 79, 2, 59, 92] → [9]
[99, 77, 42, 26, 75, 7, 90, 38] → [8]
[ ] → [0]
[37, 87, 33, 24, 18, 2, 17, 71, 47, 66] → [10]
0.428 8 c138 remove all occurrences of element 1
(𝜆 x (cut_vals (first x) x))
[7, 32, 7, 32, 87] → [32, 32, 87]
[27, 38, 68, 75, 79, 8, 22, 0, 44, 1] → [38, 68, 75, 79, 8, 22, 0, 44, 1]
[34, 34, 19, 34, 35, 34] → [19, 35]
[17, 17, 17] → [ ]
[92, 31, 45, 92, 49, 26, 11, 3, 97] → [31, 45, 49, 26, 11, 3, 97]
0.427 8 c018 replace element 6 with a 3
(𝜆 x (replace 6 3 x))
[7, 7, 7, 7, 7, 7, 7] → [7, 7, 7, 7, 7, 3, 7]
[8, 8, 6, 8, 5, 1, 4, 0, 5] → [8, 8, 6, 8, 5, 3, 4, 0, 5]
[5, 3, 2, 8, 4, 6] → [5, 3, 2, 8, 4, 3]
[9, 9, 3, 0, 0, 9, 0, 0, 9, 3] → [9, 9, 3, 0, 0, 3, 0, 0, 9, 3]
[9, 3, 1, 8, 3, 9, 3, 3, 1] → [9, 3, 1, 8, 3, 3, 3, 3, 1]
0.424 8 c012 remove all but elements 2 through 4
(𝜆 x (slice 2 4 x))
[3, 3, 4, 7, 6] → [3, 4, 7]
[7, 8, 2, 0, 4, 2] → [8, 2, 0]
[6] → [ ]
[2, 9, 4] → [9, 4]
[6, 8] → [8]
0.419 12 c232 mean value of the input
(𝜆 x (singleton (/ (sum x) (length x))))
[72, 14, 69, 77, 8] → [48]
[94, 60, 0, 89, 41] → [56]
[18, 10, 16, 4] → [12]
[13, 22, 68] → [34]
[52, 75, 71] → [66]
0.417 14 c094 swap elements 1 and 3 and elements 2 and 4
(𝜆 x (swap 1 3 (swap 2 4 x)))
[4, 1, 99, 66, 4] → [99, 66, 4, 1, 4]
[6, 35, 46, 67, 7, 7] → [46, 67, 6, 35, 7, 7]
[68, 90, 68, 31, 68, 58, 90] → [68, 31, 68, 90, 68, 58, 90]
[96, 35, 63, 96, 63, 52, 96, 95, 37, 95] → [63, 96, 96, 35, 63, 52, 96, 95, 37, 95]
[73, 73, 5, 5, 73, 5, 5, 5, 5] → [5, 5, 73, 73, 73, 5, 5, 5, 5]
0.414 8 c086 swap elements 1 and 4
(𝜆 x (swap 1 4 x))
[72, 14, 74, 16, 27] → [16, 14, 74, 72, 27]
[56, 0, 49, 15, 49, 80, 18, 80, 18] → [15, 0, 49, 56, 49, 80, 18, 80, 18]
[1, 35, 35, 9, 8, 41, 1, 85, 41, 7] → [9, 35, 35, 1, 8, 41, 1, 85, 41, 7]
[1, 5, 1, 5, 50, 1, 50] → [5, 5, 1, 1, 50, 1, 50]
[69, 3, 39, 51, 8, 51, 3, 3] → [51, 3, 39, 69, 8, 51, 3, 3]
0.413 15 c193 input in ascending order, minus an occurrence of both the smallest and largest elements
(𝜆 x (drop 1 (droplast 1 (sort (𝜆 y y) x))))
[37, 24, 71, 8, 0, 39, 6, 25, 90] → [6, 8, 24, 25, 37, 39, 71]
[6, 5, 7, 34, 78, 29, 23, 26, 1, 28] → [5, 6, 7, 23, 26, 28, 29, 34]
[53, 60, 91, 61, 12, 3, 68, 8, 79, 96] → [8, 12, 53, 60, 61, 68, 79, 91]
[88, 46, 2, 10, 34, 56, 45, 4, 64] → [4, 10, 34, 45, 46, 56, 64]
[57, 77, 16, 17, 27, 44, 0, 42, 1] → [1, 16, 17, 27, 42, 44, 57]
0.4 6 c056 remove element 5
(𝜆 x (cut_idx 5 x))
[2, 1, 2, 6, 7, 2] → [2, 1, 2, 6, 2]
[5, 6, 9, 6, 6, 5, 9] → [5, 6, 9, 6, 5, 9]
[7, 6, 7, 8, 6, 0, 7, 6, 0, 5] → [7, 6, 7, 8, 0, 7, 6, 0, 5]
[8, 8, 8, 8, 8, 8, 8, 8] → [8, 8, 8, 8, 8, 8, 8]
[1, 1, 1, 1, 1, 1, 1, 1, 1] → [1, 1, 1, 1, 1, 1, 1, 1]
0.396 20 c028 remove element 2 if element 1 > element 2, else remove element 3
(𝜆 x (cut_idx (if (> (first x) (second x)) 2 3) x))
[1, 2, 0, 6] → [1, 2, 6]
[3, 2, 5, 8, 0, 9, 5] → [3, 5, 8, 0, 9, 5]
[5, 7, 1, 9, 0, 6, 2, 8, 4, 7] → [5, 7, 9, 0, 6, 2, 8, 4, 7]
[3, 1, 4] → [3, 4]
[3, 0, 7, 6, 9, 4] → [3, 7, 6, 9, 4]
0.395 21 c220 if input length is even, double each element, else triple it
(𝜆 x (map (𝜆 y (* y (if (is_even (length x)) 2 3))) x))
[4, 8, 3, 29, 15] → [12, 24, 9, 87, 45]
[5, 39] → [10, 78]
[19] → [57]
[1, 4, 0, 9, 25, 6, 2, 28, 7] → [3, 12, 0, 27, 75, 18, 6, 84, 21]
[43, 23, 11, 5, 8, 30, 41, 2] → [86, 46, 22, 10, 16, 60, 82, 4]
0.394 8 c241 number of even elements
(𝜆 x (singleton (count is_even x)))
[49, 87, 13, 67, 4, 5, 8] → [2]
[0, 45, 84, 90, 72, 8, 68, 72, 30] → [8]
[5, 53, 61, 57, 7, 63, 12, 3] → [1]
[22, 22, 10, 6, 28, 26, 26, 16, 22, 26] → [10]
[3, 44, 36, 82, 4, 6, 2, 14, 32, 32] → [9]
0.392 22 c060 elements 3, 2, 1, the number 4, then elements 5 and 7, in that order
(𝜆 x (swap 3 1 (replace 4 4 (cut_idx 6 (take 7 x)))))
[7, 9, 0, 2, 6, 8, 3, 5, 1] → [0, 9, 7, 4, 6, 3]
[1, 7, 8, 2, 5, 6, 0, 4, 3, 9] → [8, 7, 1, 4, 5, 0]
[6, 7, 1, 3, 2, 0, 8, 9, 4, 5] → [1, 7, 6, 4, 2, 8]
[9, 2, 0, 5, 8, 7, 6, 4, 1, 3] → [0, 2, 9, 4, 8, 6]
[9, 2, 5, 1, 3, 4, 7, 0, 6, 8] → [5, 2, 9, 4, 3, 7]
0.391 12 c169 second largest element
(𝜆 x (singleton (max (cut_vals (max x) x))))
[26, 68, 87, 84, 58, 10] → [84]
[8, 24, 51, 14, 2, 69, 9, 28, 48] → [51]
[5, 32, 76, 7, 90, 53, 65, 54] → [76]
[36, 99, 8, 9, 16, 67, 94, 0, 4, 40] → [94]
[3, 13, 1, 95, 17, 20, 12] → [20]
0.39 8 c057 insert a 4 as element 7
(𝜆 x (insert 4 7 x))
[3, 3, 3, 3, 3, 3, 3] → [3, 3, 3, 3, 3, 3, 4, 3]
[2, 7, 8, 4, 0, 6, 5, 1] → [2, 7, 8, 4, 0, 6, 4, 5, 1]
[2, 3, 9, 7, 6, 0, 0, 8] → [2, 3, 9, 7, 6, 0, 4, 0, 8]
[2, 9, 9, 2, 9, 9, 2, 2, 2] → [2, 9, 9, 2, 9, 9, 4, 2, 2, 2]
[5, 9, 3, 7, 2, 1, 6, 0, 8] → [5, 9, 3, 7, 2, 1, 4, 6, 0, 8]
0.388 31 c150 count from element 1 up to each element, in order of appearance
(𝜆 x (flatten (map (𝜆 y (if (> y (first x)) (range (first x) 1 y) (singleton y))) x)))
[37, 20, 47, 8, 5] → [37, 20, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 8, 5]
[28, 29, 2] → [28, 28, 29, 2]
[83, 19, 7, 32, 9, 86] → [83, 19, 7, 32, 9, 83, 84, 85, 86]
[13, 1, 18] → [13, 1, 13, 14, 15, 16, 17, 18]
[24, 15, 27, 4] → [24, 15, 24, 25, 26, 27, 4]
0.386 8 c033 swap elements 1 and 4
(𝜆 x (swap 1 4 x))
[8, 1, 8, 5, 5, 2] → [5, 1, 8, 8, 5, 2]
[7, 9, 1, 5, 6, 3, 0] → [5, 9, 1, 7, 6, 3, 0]
[7, 8, 6, 5, 6, 7, 7, 5, 6, 5] → [5, 8, 6, 7, 6, 7, 7, 5, 6, 5]
[1, 9, 6, 2] → [2, 9, 6, 1]
[7, 8, 4, 6, 1, 2, 9, 5] → [6, 8, 4, 7, 1, 2, 9, 5]
0.386 17 c218 keep only elements 2 and following equal to element 1
(𝜆 x (filter (𝜆 y (== y (first x))) (drop 1 x)))
[93, 93, 52, 93, 99, 99, 71, 52] → [93, 93]
[90, 61, 9, 9, 37, 90, 30, 3, 3] → [90]
[55, 2, 55, 6, 6, 19, 53, 8, 55, 55] → [55, 55, 55]
[15, 25, 73, 6, 7, 20, 67, 13, 23] → [ ]
[45, 27, 1, 45, 1, 27, 45, 45, 45, 1] → [45, 45, 45, 45]
0.385 8 c014 remove all but elements 3 through 7
(𝜆 x (slice 3 7 x))
[6, 3, 0, 4] → [0, 4]
[9, 9, 1] → [1]
[0, 7, 9, 6, 1, 8, 2, 3] → [9, 6, 1, 8, 2]
[3, 0, 5, 7, 7, 5, 3, 0, 5] → [5, 7, 7, 5, 3]
[9] → [ ]
0.376 8 c136 remove the first occurrence of the largest element
(𝜆 x (cut_val (max x) x))
[95, 95, 73, 95, 23] → [95, 73, 95, 23]
[35, 22, 46, 94, 94, 52] → [35, 22, 46, 94, 52]
[2, 90, 8, 90, 72, 14, 13, 1, 80] → [2, 8, 90, 72, 14, 13, 1, 80]
[92, 92] → [92]
[61, 79, 89, 71, 74, 20, 30, 62, 67, 3] → [61, 79, 71, 74, 20, 30, 62, 67, 3]
0.352 8 c083 remove all but element 7
(𝜆 x (singleton (nth 7 x)))
[47, 27, 63, 1, 28, 26, 82, 1] → [82]
[67, 3, 20, 9, 50, 72, 29, 9, 35, 82] → [29]
[3, 4, 23, 57, 46, 60, 70, 7] → [70]
[6, 4, 54, 54, 5, 5, 4, 68] → [4]
[0, 6, 89, 5, 13, 89, 21, 21, 3, 30] → [21]
0.351 8 c019 replace element 6 with a 3 if there is an element 6
(𝜆 x (replace 6 3 x))
[4, 5, 5, 0, 4, 2] → [4, 5, 5, 0, 4, 3]
[6, 6] → [6, 6]
[3, 7, 2, 0, 4, 9, 8] → [3, 7, 2, 0, 4, 3, 8]
[1, 1, 7, 4, 0, 8, 9, 0] → [1, 1, 7, 4, 0, 3, 9, 0]
[4, 3, 5, 8, 3, 2, 7, 9, 1] → [4, 3, 5, 8, 3, 3, 7, 9, 1]
0.347 14 c203 the first M positive multiples of the smallest element, where M is the input’s length
(𝜆 x (mapi (𝜆 y (𝜆 z (* (min x) y))) x))
[7, 3, 5, 2, 1] → [1, 2, 3, 4, 5]
[37, 82] → [37, 74]
[23, 92, 84] → [23, 46, 69]
[67, 64, 29, 99, 8, 62, 22, 81, 44] → [8, 16, 24, 32, 40, 48, 56, 64, 72]
[36, 78, 19, 89] → [19, 38, 57, 76]
0.331 20 c115 the unique elements, prepended and appended by their sum
(𝜆 x (cons (sum (unique x)) (append (unique x) (sum (unique x)))))
[7, 17, 45, 17, 12] → [81, 7, 17, 45, 12, 81]
[4, 4, 31, 38, 38, 31, 38, 38] → [73, 4, 31, 38, 73]
[24, 3, 24, 1, 3, 2, 42, 2, 1, 42] → [72, 24, 3, 1, 2, 42, 72]
[27, 14, 14, 14, 14, 27, 27, 27, 27] → [41, 27, 14, 41]
[ ] → [0, 0]
0.329 12 c207 element-wise sum of the input and the reversed input
(𝜆 x (map sum (zip x (reverse x))))
[7, 6, 9, 79, 46] → [53, 85, 18, 85, 53]
[14, 8, 22] → [36, 16, 36]
[1, 31, 84, 4, 68, 89] → [90, 99, 88, 88, 99, 90]
[19, 1, 97, 62] → [81, 98, 98, 81]
[5, 13, 51] → [56, 26, 56]
0.325 28 c088 swap elements 1 and 4 if element 2 = element 3, else swap elements 2 and 3
(𝜆 x (if (== (second x) (third x)) (swap 1 4 x) (swap 2 3 x)))
[19, 1, 99, 19, 20, 99, 20] → [19, 99, 1, 19, 20, 99, 20]
[95, 31, 31, 4, 39, 5, 32, 0] → [4, 31, 31, 95, 39, 5, 32, 0]
[15, 53, 53, 95] → [95, 53, 53, 15]
[84, 86, 3, 84, 3, 89] → [84, 3, 86, 84, 3, 89]
[17, 41, 41, 85, 25, 2, 17, 25, 17, 10] → [85, 41, 41, 17, 25, 2, 17, 25, 17, 10]
0.322 30 c040 append 3 if the list contains a 3, else append 9 if the list contains a 9
(𝜆 x (if (is_in x 3) (append x 3) (if (is_in x 9) (append x 9) x)))
[4, 8, 3, 7, 8] → [4, 8, 3, 7, 8, 3]
[5, 8, 2, 9, 0, 0] → [5, 8, 2, 9, 0, 0, 9]
[3, 8, 5] → [3, 8, 5, 3]
[9, 1, 1, 5, 1, 6, 5, 6] → [9, 1, 1, 5, 1, 6, 5, 6, 9]
[7, 0] → [7, 0]
0.32 14 c085 remove all but element N + 1, N = element 1
(𝜆 x (singleton (nth (first x) (drop 1 x))))
[4, 39, 4, 48, 46, 48] → [46]
[2, 67, 52, 72, 93, 9, 67, 5, 68] → [52]
[5, 4, 3, 80, 36, 66, 75] → [66]
[4, 28, 5, 26, 29, 6, 94, 3] → [29]
[1, 4, 4] → [4]
0.316 10 c111 repeat the largest element N times, where N is the smallest element
(𝜆 x (repeat (max x) (min x)))
[38, 76, 18, 31, 5] → [76, 76, 76, 76, 76]
[90, 28, 72, 2, 5, 94, 85, 88, 68] → [94, 94]
[52, 75, 83, 30, 3, 93] → [93, 93, 93]
[1, 82, 56, 49, 1, 60, 60, 90] → [90]
[0, 24, 65] → [ ]
0.316 6 c073 add the index to every element
(𝜆 x (mapi + x))
[4, 4, 4, 4] → [5, 6, 7, 8]
[1] → [2]
[5, 5, 5, 2, 2, 2] → [6, 7, 8, 6, 7, 8]
[1, 3, 3, 5, 3, 0, 0, 1, 0] → [2, 5, 6, 9, 8, 6, 7, 9, 9]
[3, 3] → [4, 5]
0.315 20 c027 remove element 2 if element 1 = element 2, else remove element 3
(𝜆 x (cut_idx (if (== (first x) (second x)) 2 3) x))
[0, 0, 9, 0] → [0, 9, 0]
[8, 8, 4, 1, 8, 4, 1, 4] → [8, 4, 1, 8, 4, 1, 4]
[6, 4, 6, 2, 3, 3] → [6, 4, 2, 3, 3]
[1, 2, 5, 1, 3, 2, 5] → [1, 2, 1, 3, 2, 5]
[9, 9, 7, 7, 7, 6, 6, 7, 2] → [9, 7, 7, 7, 6, 6, 7, 2]
0.312 18 c234 repetitions in order of first appearance
(𝜆 x (flatten (map (𝜆 y (drop 1 y)) (group (𝜆 z z) x))))
[66, 0, 66, 58, 25, 0, 25, 92] → [66, 0, 25]
[48, 1, 6, 94, 96, 65, 82, 45, 90, 5] → [ ]
[7, 26, 84, 6, 62, 77, 2, 84, 10, 80] → [84]
[3, 22, 5, 24, 1, 22, 21, 19, 5, 2] → [22, 5]
[4, 16, 85, 16, 8, 16, 4, 85, 85] → [4, 16, 16, 85, 85]
0.307 8 c165 reverse the input and keep only even elements
(𝜆 x (filter is_even (reverse x)))
[68, 9, 86, 13, 57, 14, 72, 25, 69] → [72, 14, 86, 68]
[77, 5, 56, 4, 34, 22, 65, 94, 20, 3] → [20, 94, 22, 34, 4, 56]
[42, 7, 59, 1, 92, 48, 24, 63, 5, 8] → [8, 24, 48, 92, 42]
[53, 5, 0, 7, 78, 43, 45, 39, 2] → [2, 78, 0]
[54, 0, 97, 79, 99, 50, 6, 93, 3, 84] → [84, 6, 50, 0, 54]
0.306 17 c191 repeat each element N times, where N is its tens digit, in order of appearance
(𝜆 x (flatten (map (𝜆 y (repeat y (/ y 10))) x)))
[2, 0, 7, 30, 26] → [30, 30, 30, 26, 26]
[37] → [37, 37, 37]
[1, 12, 7, 9, 8, 23, 0, 6, 15] → [12, 23, 23, 15]
[55, 5, 7, 20, 1, 27] → [55, 55, 55, 55, 55, 20, 20, 27, 27]
[3, 4, 2] → [ ]
0.303 6 c026 remove element 3
(𝜆 x (cut_idx 3 x))
[4, 2, 2, 5] → [4, 2, 5]
[0, 7, 7, 4, 6] → [0, 7, 4, 6]
[3, 9, 8, 1, 6, 2, 0, 4, 5, 7] → [3, 9, 1, 6, 2, 0, 4, 5, 7]
[1, 1, 3, 2, 2, 3, 3] → [1, 1, 2, 2, 3, 3]
[8, 3, 9] → [8, 3]
0.3 8 c059 swap elements 4 and 8
(𝜆 x (swap 4 8 x))
[0, 5, 3, 8, 1, 9, 4, 6, 2] → [0, 5, 3, 6, 1, 9, 4, 8, 2]
[6, 1, 8, 5, 2, 3, 7, 9, 0, 4] → [6, 1, 8, 9, 2, 3, 7, 5, 0, 4]
[1, 0, 7, 8, 6, 4, 2, 6, 1, 9] → [1, 0, 7, 6, 6, 4, 2, 8, 1, 9]
[9, 5, 5, 9, 3, 7, 6, 3, 9, 3] → [9, 5, 5, 3, 3, 7, 6, 9, 9, 3]
[7, 3, 4, 0, 1, 6, 8, 1, 5] → [7, 3, 4, 1, 1, 6, 8, 0, 5]
0.298 11 c074 remove every element whose value < 8
(𝜆 x (filter (𝜆 y (> y 7)) x))
[8, 2, 7, 6, 8, 6] → [8, 8]
[9, 2, 0, 5, 7, 5, 2, 3, 4, 7] → [9]
[8, 8, 8, 2, 7, 7, 2] → [8, 8, 8]
[0] → [ ]
[8, 9, 9, 1, 1, 9, 8, 8, 9, 1] → [8, 9, 9, 9, 8, 8, 9]
0.295 14 c173 replace element N with the largest element in elements 1 through N
(𝜆 x (mapi (𝜆 y (𝜆 z (max (take y x)))) x))
[2, 6, 74, 86, 1, 89] → [2, 6, 74, 86, 86, 89]
[8, 9, 19, 2, 67, 83, 53, 4, 56, 95] → [8, 9, 19, 19, 67, 83, 83, 83, 83, 95]
[3, 5, 9, 50, 7, 62, 78, 0] → [3, 5, 9, 50, 50, 62, 78, 78]
[9, 11, 21, 25, 55, 48, 7, 1, 70] → [9, 11, 21, 25, 55, 55, 55, 55, 70]
[47, 66, 81, 0, 1, 99, 4] → [47, 66, 81, 81, 81, 99, 99]
0.294 34 c175 keep only elements larger than any preceding element
(𝜆 x (fold (𝜆 y (𝜆 z (if (> z (last y)) (append y z) y))) (take 1 x) (drop 1 x)))
[45, 58, 87, 48, 31, 34] → [45, 58, 87]
[7, 8, 39, 95, 11, 1, 72] → [7, 8, 39, 95]
[2, 44, 50, 62, 65, 9, 3, 8, 88, 91] → [2, 44, 50, 62, 65, 88, 91]
[2, 25, 39, 51, 16, 5, 66, 7] → [2, 25, 39, 51, 66]
[4, 31, 40, 6, 63, 1, 3, 66, 88] → [4, 31, 40, 63, 66, 88]
0.294 29 c204 keep only elements followed by 0
(𝜆 x (map first (filter (𝜆 y (== (second y) 0)) (zip (droplast 1 x) (drop 1 x)))))
[9, 34, 0, 0, 96] → [34, 0]
[4, 0, 29, 3, 0, 5, 6, 51] → [4, 3]
[29, 28, 0, 2, 0, 64] → [28, 2]
[13, 53, 88, 0, 6, 65, 21, 0, 9] → [88, 21]
[28, 4, 97, 34, 14, 0, 0, 1, 0, 88] → [14, 0, 1]
0.293 20 c031 remove whichever are equal: the two elements or the last two
(𝜆 x (if (== (first x) (second x)) drop droplast 2 x))
[6, 6, 6, 8] → [6, 8]
[0, 0, 5, 5, 0, 5, 5, 0] → [5, 5, 0, 5, 5, 0]
[1, 4, 4] → [1]
[4, 4, 8, 3, 4, 9, 9, 9, 3, 6] → [8, 3, 4, 9, 9, 9, 3, 6]
[4, 0, 2, 4, 2, 2, 7, 9, 9] → [4, 0, 2, 4, 2, 2, 7]
0.292 15 c236 even elements divided by 2
(𝜆 x (map (𝜆 y (/ y 2)) (filter is_even x)))
[18, 37, 3, 50, 13, 95, 9] → [9, 25]
[25, 24, 7, 5, 38, 52, 74, 94] → [12, 19, 26, 37, 47]
[92, 84, 9, 23, 7, 87, 73, 28, 90] → [46, 42, 14, 45]
[64, 80, 8, 20, 2, 7, 6, 0, 44, 12] → [32, 40, 4, 10, 1, 3, 0, 22, 6]
[86, 53, 99, 5, 30, 65, 72, 93, 43] → [43, 15, 36]
0.286 16 c054 replace elements 1 and 2 with element 3
(𝜆 x (concat (repeat (third x) 3) (drop 3 x)))
[5, 5, 9, 5] → [9, 9, 9, 5]
[7, 5, 2, 5, 7, 7, 2] → [2, 2, 2, 5, 7, 7, 2]
[4, 1, 1, 1, 1, 4, 4, 1, 3, 3] → [1, 1, 1, 1, 1, 4, 4, 1, 3, 3]
[9, 5, 9, 2, 3, 8, 2, 3, 8] → [9, 9, 9, 2, 3, 8, 2, 3, 8]
[9, 3, 6, 7, 0] → [6, 6, 6, 7, 0]
0.267 12 c227 interleave input and reversed input; keep only unique elements in order of appearance
(𝜆 x (unique (flatten (zip x (reverse x)))))
[9, 66, 10, 0, 43, 66, 9] → [9, 66, 10, 43, 0]
[85, 39, 0, 33, 26, 27, 83, 18] → [85, 18, 39, 83, 0, 27, 33, 26]
[40, 75, 49, 75, 40, 49, 49, 68, 49] → [40, 49, 75, 68]
[55, 17, 20, 89, 22, 5, 20, 6, 65, 1] → [55, 1, 17, 65, 20, 6, 89, 22, 5]
[65, 99, 86, 86, 28, 42, 7, 42, 53, 86] → [65, 86, 99, 53, 42, 7, 28]
0.265 20 c024 insert as element 2: 8 if element 1 > 5 else 5
(𝜆 x (insert (if (> 5 (first x)) 8 5) 2 x))
[8, 7, 4, 1] → [8, 5, 7, 4, 1]
[0, 8, 3] → [0, 8, 8, 3]
[9, 9, 4, 9, 6, 1] → [9, 5, 9, 4, 9, 6, 1]
[7, 6, 0, 7, 6] → [7, 5, 6, 0, 7, 6]
[5, 2] → [5, 5, 2]
0.264 16 c200 tens digits of the elements in ascending order
(𝜆 x (sort (𝜆 y y) (map (𝜆 z (/ z 10)) x)))
[49, 0, 24, 33, 92] → [0, 2, 3, 4, 9]
[5, 54, 41, 72] → [0, 4, 5, 7]
[68, 5, 91, 59, 36, 18, 71] → [0, 1, 3, 5, 6, 7, 9]
[14, 89, 46, 34, 79, 0] → [0, 1, 3, 4, 7, 8]
[87, 90, 16] → [1, 8, 9]
0.256 12 c010 elements 2 through N + 1, N = element 1
(𝜆 x (take (first x) (drop 1 x)))
[2, 3, 2, 7, 6] → [3, 2]
[3, 9, 8, 6, 5, 1] → [9, 8, 6]
[1, 2, 4, 5, 0, 8, 9, 7, 8] → [2]
[5, 5, 5, 1, 1, 5] → [5, 5, 1, 1, 5]
[0, 2] → [ ]
0.256 10 c123 remove all but element N, N = last element
(𝜆 x (singleton (nth (last x) x)))
[28, 48, 57, 36, 4] → [36]
[90, 54, 16, 3] → [16]
[22, 9, 14, 87, 71, 3] → [14]
[72, 1] → [72]
[69, 63, 50, 8, 86, 17, 0, 80, 19, 7] → [0]
0.256 20 c023 insert as element 2: 8 if the list length > 5 else 5
(𝜆 x (insert (if (> 5 (length x)) 8 5) 2 x))
[2, 0, 5, 4] → [2, 8, 0, 5, 4]
[0, 2, 7, 9, 5, 8, 6, 3, 0, 9] → [0, 5, 2, 7, 9, 5, 8, 6, 3, 0, 9]
[9, 7, 6, 1, 2] → [9, 5, 7, 6, 1, 2]
[8, 8] → [8, 8, 8]
[7, 0, 2] → [7, 8, 0, 2]
0.256 16 c194 reverse the input; prepend and append the input’s length
(𝜆 x (cons (length x) (append (reverse x) (length x))))
[76, 62, 80, 54, 23] → [5, 23, 54, 80, 62, 76, 5]
[81, 43] → [2, 43, 81, 2]
[1, 63, 21, 16] → [4, 16, 21, 63, 1, 4]
[92, 51, 35, 20, 9, 0, 18] → [7, 18, 0, 9, 20, 35, 51, 92, 7]
[39, 90, 8] → [3, 8, 90, 39, 3]
0.25 19 c245 number of times element 1 appears in elements 2 and following
(𝜆 x (singleton (count (𝜆 y (== (first x) y)) (drop 1 x))))
[5, 5, 5, 5, 5, 41, 5] → [5]
[67, 23, 84, 30, 18, 80, 1, 69, 28] → [0]
[1, 40, 1, 3, 51, 9, 91, 1, 2, 1] → [3]
[59, 87, 59, 91, 53, 0, 2, 62, 76, 61] → [1]
[18, 49, 72, 7, 71, 8, 27, 97] → [0]
0.242 20 c032 remove two elements: the first two if element 1 > last element, else the last two
(𝜆 x (if (> (first x) (last x)) drop droplast 2 x))
[0, 1, 7, 9, 3] → [0, 1, 7]
[7, 6, 4, 4, 1, 8, 3] → [4, 4, 1, 8, 3]
[6, 3, 2, 9, 9, 2, 6, 2] → [2, 9, 9, 2, 6, 2]
[0, 9, 4, 6, 8, 2, 5, 7, 1] → [0, 9, 4, 6, 8, 2, 5]
[3, 7, 0, 5, 1, 4, 8, 6, 2, 9] → [3, 7, 0, 5, 1, 4, 8, 6]
0.242 6 c058 remove the first 7 elements
(𝜆 x (drop 7 x))
[7, 2, 9, 5, 3, 6, 4, 5] → [5]
[9, 8, 9, 8, 9, 8, 5, 0, 2, 5] → [0, 2, 5]
[3, 0, 1, 4, 8, 2, 7] → [ ]
[2, 8, 6, 3, 9, 5, 7, 6, 4] → [6, 4]
[9, 2, 4, 8, 0, 5, 3, 1, 7] → [1, 7]
0.242 10 c174 keep the first N elements, where N is the number of unique elements
(𝜆 x (take (length (unique x)) x))
[49, 32, 85, 49, 32, 2] → [49, 32, 85, 49]
[29, 0, 77, 35, 50, 7, 53, 35, 8, 82] → [29, 0, 77, 35, 50, 7, 53, 35, 8]
[66, 71, 9, 72, 11, 86, 91, 9] → [66, 71, 9, 72, 11, 86, 91]
[67, 1, 24, 37, 5, 18, 67] → [67, 1, 24, 37, 5, 18]
[9, 52, 96, 27, 83, 4, 42, 98, 4] → [9, 52, 96, 27, 83, 4, 42, 98]
0.238 10 c229 keep only first N elements of the reversed input, N = element 1
(𝜆 x (take (first x) (reverse x)))
[7, 58, 5, 9, 21, 22, 51] → [51, 22, 21, 9, 5, 58, 7]
[4, 89, 16, 33, 53, 3, 6, 1, 76] → [76, 1, 6, 3]
[5, 18, 99, 7, 7, 99, 81, 11] → [11, 81, 99, 7, 7]
[1, 3, 49, 5, 2, 15, 77, 68, 27, 13] → [13]
[9, 2, 72, 56, 1, 0, 26, 69, 95, 86] → [86, 95, 69, 26, 0, 1, 56, 72, 2]
0.237 15 c162 replace each element, M, with 3 * M + 7
(𝜆 x (map (𝜆 y (+ 7 (* 3 y))) x))
[8, 0, 17, 5, 5, 0] → [31, 7, 58, 22, 22, 7]
[3, 9, 1, 7, 2, 4, 8, 0, 15, 5] → [16, 34, 10, 28, 13, 19, 31, 7, 52, 22]
[18, 1, 5, 11, 2, 1, 18] → [61, 10, 22, 40, 13, 10, 61]
[8, 7, 3, 9, 5, 1, 5, 1, 4] → [31, 28, 16, 34, 22, 10, 22, 10, 19]
[19, 3, 4, 1, 6, 2, 0, 9] → [64, 16, 19, 10, 25, 13, 7, 34]
0.231 34 c039 append 3 if the list length is 3, else append 9 if the list length is 9
(𝜆 x (if (== (length x) 3) (append x 3) (if (== (length x) 9) (append x 9) x)))
[9, 3, 6] → [9, 3, 6, 3]
[2, 1, 0, 1, 7, 8, 1, 8, 7] → [2, 1, 0, 1, 7, 8, 1, 8, 7, 9]
[9, 1, 4] → [9, 1, 4, 3]
[0, 5, 6, 5, 5] → [0, 5, 6, 5, 5]
[4, 5, 8, 4, 0, 2, 8, 7, 2] → [4, 5, 8, 4, 0, 2, 8, 7, 2, 9]
0.23 26 c181 reverse the order of elements with even indices
(𝜆 x (flatten (zip (filteri (𝜆 y (𝜆 z (is_odd y)) x)) (reverse (filteri (𝜆 u (𝜆 v (is_even u))) x)))))
[24, 99, 36, 61, 55, 6] → [24, 6, 36, 61, 55, 99]
[1, 53, 21, 2, 57, 48, 74, 7] → [1, 7, 21, 48, 57, 2, 74, 53]
[16, 97, 40, 26, 35, 65, 63, 59] → [16, 59, 40, 65, 35, 26, 63, 97]
[4, 19, 51, 96, 33, 3] → [4, 3, 51, 96, 33, 19]
[39, 50, 8, 82, 68, 52, 1, 89, 14, 5] → [39, 5, 8, 89, 68, 52, 1, 82, 14, 50]
0.23 15 c163 replace each element, M, with 2 * M - 10
(𝜆 x (map (𝜆 y (- (* y 2) 10)) x))
[7, 9, 8, 24, 23] → [4, 8, 6, 38, 36]
[6, 8, 47, 6] → [2, 6, 84, 2]
[7, 11, 7, 5] → [4, 12, 4, 0]
[9, 5, 22, 18] → [8, 0, 34, 26]
[33, 19, 29, 8] → [56, 28, 48, 6]
0.22 19 c154 triple each even element
(𝜆 x (map (𝜆 y (if (is_even y) (* 3 y) y)) x))
[5, 93, 14, 73, 4, 8] → [5, 93, 42, 73, 12, 24]
[77, 0, 6, 8, 35, 7, 22, 21] → [77, 0, 18, 24, 35, 7, 66, 21]
[81, 23, 89, 6, 9, 2, 1, 5, 55] → [81, 23, 89, 18, 9, 6, 1, 5, 55]
[71, 75, 8, 1, 99, 6, 4] → [71, 75, 24, 1, 99, 18, 12]
[6, 3, 16, 53, 20, 47, 69, 5, 33, 0] → [18, 3, 48, 53, 60, 47, 69, 5, 33, 0]
0.215 21 c166 unique elements in ascending order by the sum of their digits
(𝜆 x (sort (𝜆 y (+ (% y 10) (/ y 10))) (unique x)))
[43, 20, 1, 20, 17, 55] → [1, 20, 43, 17, 55]
[92, 24, 11, 25, 21, 53, 25, 21] → [11, 21, 24, 25, 53, 92]
[86, 7, 63, 81, 9, 97, 41, 86, 3] → [3, 41, 7, 63, 81, 9, 86, 97]
[70, 70, 50, 70, 8, 50, 8, 50, 8, 8] → [50, 70, 8]
[58, 58, 58, 82, 58, 82, 58] → [82, 58]
0.209 20 c084 remove all but element 7
(𝜆 x (if (> 7 (length x)) empty (singleton (nth 7 x))))
[2, 42] → [ ]
[90, 8, 5, 34, 79, 65, 8, 48, 79, 9] → [8]
[94, 0, 58, 62, 7, 3, 1, 55, 88] → [1]
[5, 5] → [ ]
[85, 18, 85, 91, 91, 18, 91] → [91]
0.2 46 c249 use 0s to delimit sublists; give element 1 of each sublist
(𝜆 x (map first (reverse (fold (𝜆 y (𝜆 z (if (== z 0) (cons empty y) (cons (append (first y) z) (drop 1 y))))) (singleton empty) x))))
[64, 0, 50, 1, 50, 1, 0, 1, 64] → [64, 50, 1]
[8, 0, 4, 68, 68, 78, 0, 68, 25, 68] → [8, 4, 68]
[94, 9, 3, 5, 5, 0, 5, 0, 95] → [94, 5, 95]
[2, 3, 67, 0, 44, 0, 6, 91, 76] → [2, 44, 6]
[42, 37, 80, 0, 47, 13, 80, 0, 80, 42] → [42, 47, 80]
0.199 18 c118 left-rotate by N elements, N = last element
(𝜆 x (concat (drop (last x) x) (take (last x) x)))
[24, 8, 57, 44, 4] → [4, 24, 8, 57, 44]
[97, 28, 30, 5, 48, 7, 2, 76, 9, 1] → [28, 30, 5, 48, 7, 2, 76, 9, 1, 97]
[18, 96, 25, 71, 99, 1] → [96, 25, 71, 99, 1, 18]
[39, 85, 2] → [2, 39, 85]
[5, 6, 22, 44, 90, 11, 3] → [44, 90, 11, 3, 5, 6, 22]
0.199 19 c152 replace each element with the product of its digits
(𝜆 x (map (𝜆 y (* (/ y 10) (% y 10))) x))
[37, 98, 4, 19, 82] → [21, 72, 0, 9, 16]
[87, 5, 77, 7, 54, 67, 8] → [56, 0, 49, 0, 20, 42, 0]
[59, 47, 46] → [45, 28, 24]
[65, 25] → [30, 10]
[88] → [64]
0.197 32 c237 cumulative sum of unique elements
(𝜆 x (fold (𝜆 y (𝜆 z (append y (+ (last y) z)))) (take 1 (unique x)) (drop 1 (unique x))))
[14, 1, 3, 2, 14, 3] → [14, 15, 18, 20]
[7, 15, 2, 1, 0, 20, 20, 0, 4] → [7, 22, 24, 25, 25, 45, 49]
[1, 4, 1, 7, 0, 3, 2, 0] → [1, 5, 12, 12, 15, 17]
[0, 7, 4, 3, 8, 16, 16, 6, 2, 0] → [0, 7, 11, 14, 22, 38, 44, 46]
[6, 7, 8, 5, 7, 9, 7] → [6, 13, 21, 26, 35]
0.196 8 c243 number of odd elements
(𝜆 x (singleton (count is_odd x)))
[6, 92, 34, 20, 69, 34, 0] → [1]
[19, 5, 4, 33, 17, 3, 19, 45, 93, 7] → [9]
[24, 21, 15, 94, 32, 47, 2, 3] → [4]
[2, 25, 18, 8, 46, 29, 38, 99] → [3]
[75, 8, 55, 5, 42, 62, 67, 89, 43] → [6]
0.194 21 c188 replace each element with 1 if it is divisible by 3, else 0
(𝜆 x (map (𝜆 y (if (== (% y 3) 0) 1 0)) x))
[84, 9, 10, 11, 4] → [1, 1, 0, 0, 0]
[79, 3, 48, 13, 53, 41, 22, 2, 5] → [0, 1, 1, 0, 0, 0, 0, 0, 0]
[95, 28, 86, 2, 21, 6, 40, 55] → [0, 0, 0, 0, 1, 1, 0, 0]
[90, 60] → [1, 1]
[38, 51, 9] → [0, 1, 1]
0.192 14 c139 remove all occurrences of the smallest and largest elements
(𝜆 x (cut_vals (max x) (cut_vals (min x) x)))
[28, 97, 22, 97, 22] → [28]
[0, 85, 96, 30] → [85, 30]
[20, 45, 76, 66, 92, 52, 7, 8] → [20, 45, 76, 66, 52, 8]
[0, 4, 38, 1, 88, 88, 62, 2, 81, 87] → [4, 38, 1, 62, 2, 81, 87]
[14, 13, 91, 43, 13, 17] → [14, 43, 17]
0.189 28 c036 swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4
(𝜆 x (if (> (second x) (third x)) (swap 2 3 x) (swap 1 4 x)))
[1, 4, 0, 4] → [1, 0, 4, 4]
[6, 0, 8, 2, 5, 2, 1, 7, 3, 4] → [2, 0, 8, 6, 5, 2, 1, 7, 3, 4]
[9, 6, 9, 6, 9, 6] → [6, 6, 9, 9, 9, 6]
[5, 8, 5, 8, 3, 6, 1] → [5, 5, 8, 8, 3, 6, 1]
[0, 4, 1, 9, 7] → [0, 1, 4, 9, 7]
0.186 28 c201 elements > element 1, followed by elements < element 1
(𝜆 x (concat (filter (𝜆 y (< (first x) y)) x) (filter (𝜆 z (> (first x) z)) x)))
[9, 0, 73, 25, 4] → [73, 25, 0, 4]
[57, 62, 34, 54, 3, 6, 75, 8, 91, 99] → [62, 75, 91, 99, 34, 54, 3, 6, 8]
[51, 20, 95, 39, 52, 53, 78, 2] → [95, 52, 53, 78, 20, 39, 2]
[40] → [ ]
[43, 41, 22, 48, 77, 82, 18] → [48, 77, 82, 41, 22, 18]
0.182 11 c217 elements in ascending order by ones digits
(𝜆 x (sort (𝜆 y (% y 10)) x))
[34, 33, 80, 4, 79] → [80, 33, 34, 4, 79]
[36, 72, 45, 67, 50, 90] → [50, 90, 72, 45, 36, 67]
[66, 52, 15, 32] → [52, 32, 15, 66]
[83, 30, 28, 38, 21, 0, 5] → [30, 0, 21, 83, 5, 28, 38]
[63, 42, 1, 69, 61, 75, 46] → [1, 61, 42, 63, 75, 46, 69]
0.178 14 c005 remove all but element N + 1, N = element 1
(𝜆 x (singleton (nth (first x) (drop 1 x))))
[2, 1, 9, 6, 7, 0, 4, 5, 3] → [9]
[7, 2, 1, 8, 0, 6, 3, 5, 9, 4] → [5]
[5, 1, 7, 6, 9, 8, 2, 0, 3, 4] → [8]
[9, 1, 6, 4, 7, 5, 3, 8, 2, 0] → [0]
[4, 1, 9, 6, 3, 2, 5, 0, 8, 7] → [3]
0.178 21 c209 elements in ascending order; insert sum of smallest and largest elements at index 3
(𝜆 x (insert (+ (max x) (min x)) 3 (sort (𝜆 y y) x)))
[34, 2, 3, 96, 64] → [2, 3, 98, 34, 64, 96]
[87, 76, 1, 38, 85, 83] → [1, 38, 88, 76, 83, 85, 87]
[9, 67, 94, 5] → [5, 9, 99, 67, 94]
[39, 86, 23, 8, 7, 31] → [7, 8, 93, 23, 31, 39, 86]
[25, 72, 49] → [25, 49, 97, 72]
0.174 12 c063 remove the first N + 1 elements, N = element 1
(𝜆 x (drop (first x) (drop 1 x)))
[2, 6, 2, 6, 6, 6] → [6, 6, 6]
[4, 1, 1, 4, 1, 1, 3] → [1, 3]
[3, 3, 3, 3, 3, 3, 3, 3, 3, 3] → [3, 3, 3, 3, 3, 3]
[1, 7, 9, 9, 8, 4, 1, 7, 8] → [9, 9, 8, 4, 1, 7, 8]
[0, 3, 9, 4, 6, 6, 7, 8, 2] → [3, 9, 4, 6, 6, 7, 8, 2]
0.161 16 c141 replace element M + 2 with N, M = element 1, N = element 2; remove elements 1 and 2
(𝜆 x (replace (first x) (second x) (drop 2 x)))
[4, 3, 12, 6, 67, 1, 9] → [12, 6, 67, 3, 9]
[3, 1, 2, 10, 90, 6, 0, 76] → [2, 10, 1, 6, 0, 76]
[5, 7, 33, 0, 71, 9, 78, 4, 2, 66] → [33, 0, 71, 9, 7, 4, 2, 66]
[1, 0, 1, 39, 49, 14, 90, 57, 0, 99] → [0, 39, 49, 14, 90, 57, 0, 99]
[2, 4, 59, 62, 5, 6, 36, 45, 64] → [59, 4, 5, 6, 36, 45, 64]
0.155 28 c089 swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4
(𝜆 x (if (> (second x) (third x)) (swap 2 3 x) (swap 1 4 x)))
[90, 7, 14, 59, 53, 24, 25] → [59, 7, 14, 90, 53, 24, 25]
[28, 99, 6, 43, 41, 28] → [28, 6, 99, 43, 41, 28]
[96, 8, 51, 44, 20] → [44, 8, 51, 96, 20]
[58, 65, 32, 63] → [58, 32, 65, 63]
[78, 97, 77, 93, 64, 3, 38, 18, 0, 24] → [78, 77, 97, 93, 64, 3, 38, 18, 0, 24]
0.148 14 c124 element M, M = element N, N = element 1
(𝜆 x (singleton (nth (nth (first x) x) x)))
[2, 5, 0, 82, 9] → [9]
[4, 93, 98, 3, 1, 96] → [98]
[3, 27, 5, 2, 8, 7, 97, 84, 42] → [8]
[8, 25, 16, 35, 6, 1, 49, 3, 2, 55] → [16]
[7, 61, 0, 56, 8, 92, 4, 2] → [56]
0.141 11 c216 elements in ascending order by tens digits
(𝜆 x (sort (𝜆 y (/ y 10)) x))
[77, 74, 26, 9, 31] → [9, 26, 31, 77, 74]
[54, 86, 4, 66, 25, 13, 84] → [4, 13, 25, 54, 66, 86, 84]
[91, 20, 3, 82] → [3, 20, 82, 91]
[62, 32, 78, 53, 42, 8, 6] → [8, 6, 32, 42, 53, 62, 78]
[22, 38, 58, 30, 92, 14] → [14, 22, 38, 30, 58, 92]
0.14 21 c143 replace every occurrence of the largest element with the smallest element
(𝜆 x (map (𝜆 y (if (== y (max x)) (min x) y)) x))
[9, 0, 49, 49, 3] → [9, 0, 0, 0, 3]
[8, 82, 71, 25, 24, 31, 90, 34, 69, 6] → [8, 82, 71, 25, 24, 31, 6, 34, 69, 6]
[9, 83, 0, 56, 18, 48, 61, 5, 12] → [9, 0, 0, 56, 18, 48, 61, 5, 12]
[74, 8, 2, 74, 22, 4] → [2, 8, 2, 2, 22, 4]
[52, 44, 16, 1, 6, 5, 52, 23] → [1, 44, 16, 1, 6, 5, 1, 23]
0.139 16 c215 replace element M + 1 with the length of the input, M = element 1; drop element 1
(𝜆 x (replace (first x) (length x) (drop 1 x)))
[3, 59, 55, 17, 3] → [59, 55, 5, 3]
[8, 4, 0, 43, 95, 70, 1, 34, 0, 4] → [4, 0, 43, 95, 70, 1, 34, 10, 4]
[5, 74, 35, 35, 36, 78, 36, 35] → [74, 35, 35, 36, 8, 36, 35]
[5, 31, 60, 84, 7, 89, 96] → [31, 60, 84, 7, 7, 96]
[6, 25, 8, 72, 79, 27, 24, 2, 94] → [25, 8, 72, 79, 27, 9, 2, 94]
0.136 37 c144 replace every occurrence of the largest or smallest element with their absolute difference
(𝜆 x (map (𝜆 y (if (or (== y (max x)) (== y (min x))) (- (max x) (min x)) y)) x))
[60, 87, 71, 94, 35] → [60, 87, 71, 59, 59]
[11, 90, 4, 16] → [11, 86, 86, 16]
[14, 52, 5] → [14, 47, 47]
[23, 77] → [54, 54]
[22] → [0]
0.129 15 c128 elements in ascending order after removing elements 1, 2, and 5
(𝜆 x (sort (𝜆 y y) (cut_idx 3 (drop 2 x))))
[14, 46, 41, 44, 85, 5] → [5, 41, 44]
[34, 74, 96, 40, 9, 7, 58, 2] → [2, 7, 40, 58, 96]
[69, 8, 38, 91, 83, 54, 10, 17, 51] → [10, 17, 38, 51, 54, 91]
[3, 1, 28, 0, 6, 93, 90, 9, 56, 45] → [0, 9, 28, 45, 56, 90, 93]
[26, 49, 8, 4, 21, 16, 63] → [4, 8, 16, 63]
0.127 8 c208 keep only the last N elements, where N is the last element
(𝜆 x (takelast (last x) x))
[3, 1, 5, 35, 65, 7, 84, 4] → [65, 7, 84, 4]
[28, 69, 5, 58, 51, 66, 16, 9, 7] → [5, 58, 51, 66, 16, 9, 7]
[23, 9, 22, 0, 76, 3, 5, 75, 2, 1] → [1]
[2, 24, 92, 14, 95, 54, 79, 42, 71, 8] → [92, 14, 95, 54, 79, 42, 71, 8]
[94, 8, 68, 86, 7, 95, 56, 0, 6] → [86, 7, 95, 56, 0, 6]
0.124 28 c035 swap elements 1 and 4 if element 2 = element 3, else swap elements 2 and 3
(𝜆 x (if (== (second x) (third x)) (swap 1 4 x) (swap 2 3 x)))
[0, 5, 0, 0] → [0, 0, 5, 0]
[7, 1, 7, 7, 1, 7, 1] → [7, 7, 1, 7, 1, 7, 1]
[3, 3, 3, 2, 2, 6] → [2, 3, 3, 3, 2, 6]
[9, 9, 8, 9, 8] → [9, 8, 9, 9, 8]
[5, 5, 4, 5, 6, 6, 4, 4, 4, 6] → [5, 4, 5, 5, 6, 6, 4, 4, 4, 6]
0.118 12 c214 remove elements 1 and N+1, where N is element 1
(𝜆 x (cut_idx (first x) (drop 1 x)))
[4, 47, 54, 54, 4, 4] → [47, 54, 54, 4]
[7, 6, 30, 64, 8, 41, 41, 36, 56] → [6, 30, 64, 8, 41, 41, 56]
[2, 7, 23, 63, 63, 23, 93, 78] → [7, 63, 63, 23, 93, 78]
[3, 3, 21, 32, 21, 21, 98] → [3, 21, 21, 21, 98]
[9, 27, 19, 1, 64, 61, 61, 67, 27, 65] → [27, 19, 1, 64, 61, 61, 67, 27]
0.116 12 c130 elements 2 through N + 1, N = element 1
(𝜆 x (take (first x) (drop 1 x)))
[5, 0, 24, 4, 41, 18, 9] → [0, 24, 4, 41, 18]
[1, 75, 48, 90, 5, 9, 4, 21, 59] → [75]
[0, 96, 6, 62, 83, 96, 43, 25, 52, 43] → [ ]
[3, 81, 0, 8, 87, 62, 6, 10] → [81, 0, 8]
[7, 9, 6, 4, 15, 45, 88, 83, 26, 92] → [9, 6, 4, 15, 45, 88, 83]
0.115 24 c159 element N counts the number of occurrences of N, up to the largest element
(𝜆 x (map (𝜆 y (count (𝜆 z (== y z)) x)) (range 1 1 (max x))))
[8, 8, 8, 6, 5, 5, 5, 6] → [0, 0, 0, 0, 3, 2, 0, 3]
[3, 4, 3, 5, 4, 4, 5, 5, 4, 3] → [0, 0, 3, 4, 3]
[7, 6, 6, 6, 6, 2, 2, 7, 6] → [0, 2, 0, 0, 0, 5, 2]
[4, 4, 7, 7, 9, 4, 9, 2, 2] → [0, 2, 0, 3, 0, 0, 2, 0, 2]
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1] → [10]
0.114 19 c205 product of elements divisible by 4
(𝜆 x (singleton (product (filter (𝜆 y (== (% y 4) 0)) x))))
[4, 1, 9, 20, 3, 11, 70] → [80]
[99, 46, 7, 5, 2, 8, 5, 12] → [96]
[15, 73, 98, 8, 53, 1, 95, 9, 4] → [32]
[67, 19, 23, 7, 2, 12, 8, 23, 97, 6] → [96]
[83, 37, 16, 21, 0, 6, 2, 87, 7] → [0]
0.112 30 c076 the maximum, last element, length, first element, and minimum, in that order
(𝜆 x (cons (max x) (cons (last x) (cons (length x) (cons (first x) (singleton (min x)))))))
[5, 7, 9, 4] → [9, 4, 4, 5, 4]
[0, 6, 1, 9, 7, 8, 4, 2, 5, 3] → [9, 3, 10, 0, 0]
[6] → [6, 6, 1, 6, 6]
[8, 2] → [8, 2, 2, 8, 2]
[3, 5, 4, 0, 8, 7, 1] → [8, 1, 7, 3, 0]
0.107 48 c250 use 0s to delimit sublists; concatenate reverse of each sublist
(𝜆 x (flatten (map reverse (reverse (fold (𝜆 y (𝜆 z (if (== z 0) (cons empty y) (cons (append (first y) z) (drop 1 y))))) (singleton empty) x)))))
[38, 0, 38, 3, 60, 60, 0, 3, 38] → [38, 60, 60, 3, 38, 38, 3]
[4, 8, 0, 77, 0, 25, 66, 77, 40, 66] → [8, 4, 77, 66, 40, 77, 66, 25]
[7, 27, 0, 8, 5, 0, 86, 24, 4, 4] → [27, 7, 5, 8, 4, 4, 24, 86]
[6, 14, 75, 0, 1, 75, 75, 0, 0] → [75, 14, 6, 75, 75, 1]
[2, 0, 62, 80, 54, 49, 0, 6, 4] → [2, 49, 54, 80, 62, 4, 6]
0.103 13 c186 keep only elements greater than element 1
(𝜆 x (filter (𝜆 y (> y (first x))) x))
[6, 71, 97, 98, 0, 64, 60, 3, 0] → [71, 97, 98, 64, 60]
[79, 7, 32, 2, 8, 86, 93, 51, 95, 5] → [86, 93, 95]
[31, 30, 53, 74, 9, 12, 12, 5, 31, 31] → [53, 74]
[77, 20, 26, 99, 12, 81, 27, 90, 90, 77] → [99, 81, 90, 90]
[72, 17, 4, 50, 80, 17, 37, 29, 57] → [80]
0.098 25 c242 take the largest unique element, append the second largest unique element, prepend the third largest unique element, append the fourth largest unique element, and so on
(𝜆 x (fold (𝜆 y (𝜆 z (append (reverse y) z))) empty (reverse (unique (sort (𝜆 u u) x)))))
[43, 43, 43, 17, 17, 4, 17, 17] → [17, 43, 4]
[32, 81, 53, 32, 1, 32, 81, 53, 81, 1] → [32, 81, 53, 1]
[66, 0, 6, 66, 31, 66, 28, 28] → [6, 31, 66, 28, 0]
[60, 92, 9, 18, 35, 9, 10, 60, 10, 92] → [10, 35, 92, 60, 18, 9]
[51, 46, 74, 46, 75, 48, 89, 89, 51] → [48, 74, 89, 75, 51, 46]
0.091 11 c160 replace each element, M, with 99 - M
(𝜆 x (map (𝜆 y (- 99 y)) x))
[55, 82, 57, 4, 59, 6] → [44, 17, 42, 95, 40, 93]
[1, 13, 34, 6, 36, 79, 21, 11, 64, 46] → [98, 86, 65, 93, 63, 20, 78, 88, 35, 53]
[32, 70, 51, 41, 5, 69, 28] → [67, 29, 48, 58, 94, 30, 71]
[9, 72, 7, 75, 74, 1, 79, 84, 2] → [90, 27, 92, 24, 25, 98, 20, 15, 97]
[8, 66, 3, 43, 2, 73, 48, 74] → [91, 33, 96, 56, 97, 26, 51, 25]
0.073 15 c167 keep only elements divisible by 3
(𝜆 x (filter (𝜆 y (== (% y 3) 0)) x))
[18, 78, 3, 5, 62, 8] → [18, 78, 3]
[27, 70, 0, 21, 74, 33, 87, 12, 22] → [27, 0, 21, 33, 87, 12]
[31, 91, 84, 30, 38, 10, 66, 0, 98, 94] → [84, 30, 66, 0]
[90, 50, 3, 1, 99, 0, 93] → [90, 3, 99, 0, 93]
[45, 8, 2, 69, 39, 9, 44, 4] → [45, 69, 39, 9]
0.068 6 c202 the indices of every even number
(𝜆 x (find is_even x))
[31, 98, 55, 14, 50] → [2, 4, 5]
[71, 7, 23, 20, 13, 66, 26, 42, 52] → [4, 6, 7, 8, 9]
[91, 78, 5, 46, 15, 33, 0, 62] → [2, 4, 7, 8]
[73, 41, 58, 24] → [3, 4]
[90, 60, 25] → [1, 2]
0.056 16 c129 elements M + 2 through N + 2, M = element 1, N = element 2
(𝜆 x (slice (first x) (second x) (drop 2 x)))
[2, 3, 75, 17, 8, 6] → [17, 8]
[1, 4, 99, 5, 4, 14, 73, 28] → [99, 5, 4, 14]
[4, 6, 37, 8, 1, 31, 7, 69, 62, 67] → [31, 7, 69]
[4, 5, 20, 66, 61, 19, 16] → [19, 16]
[6, 6, 70, 27, 86, 99, 7, 30, 66] → [30]
0.048 10 c221 sum of even elements
(𝜆 x (singleton (sum (filter is_even x))))
[46, 91, 4, 9, 1, 67, 5] → [50]
[65, 44, 3, 1, 91, 7, 41, 43, 20] → [64]
[55, 26, 34, 95, 19, 6, 0, 79, 8, 53] → [74]
[81, 21, 0, 32, 16, 4, 2, 28, 33] → [82]
[6, 13, 7, 10, 47, 75, 80, 93] → [96]
0.045 13 c131 keep only elements whose tens digit is even
(𝜆 x (filter (𝜆 y (is_even (/ y 10))) x))
[68, 93, 10, 24, 5] → [68, 24, 5]
[54, 99, 84, 58] → [84]
[3, 38, 7, 16, 78, 51, 41, 12, 67, 77] → [3, 7, 41, 67]
[95, 37, 73, 97, 97, 56, 97, 97] → [ ]
[94, 0, 9, 5, 6, 33, 4, 59, 54] → [0, 9, 5, 6, 4]
0.045 21 c180 take the smallest element, append the second smallest, prepend the third smallest, append the fourth smallest, and so on
(𝜆 x (fold (𝜆 y (𝜆 z (append (reverse y) z))) empty (sort (𝜆 u u) x)))
[43, 6, 18, 33, 8, 38] → [38, 18, 6, 8, 33, 43]
[11, 7, 56, 84, 4, 60, 5] → [60, 11, 5, 4, 7, 56, 84]
[1, 67, 23, 63, 59, 36, 45, 21, 5] → [63, 45, 23, 5, 1, 21, 36, 59, 67]
[93, 3, 48, 34, 21, 83, 14, 66, 65, 80] → [83, 66, 48, 21, 3, 14, 34, 65, 80, 93]
[92, 94, 57, 2, 98, 89, 13, 28] → [94, 89, 28, 2, 13, 57, 92, 98]
0.042 16 c015 elements M + 2 through N + 2, M = element 1, N = element 2
(𝜆 x (slice (first x) (second x) (drop 2 x)))
[3, 4, 5, 5, 4, 3, 3] → [4, 3]
[1, 3, 9, 2, 0, 5, 7, 5, 7, 1] → [9, 2, 0]
[4, 5, 6, 6, 4, 6, 9, 9] → [6, 9]
[1, 1, 3, 2, 3, 4, 5, 6, 5, 1] → [3]
[1, 5, 8, 3, 6, 2, 4, 8, 0] → [8, 3, 6, 2, 4]
0.04 23 c179 take the largest element, append the second largest, prepend the third largest, append the fourth largest, and so on
(𝜆 x (fold (𝜆 y (𝜆 z (append (reverse y) z))) empty (reverse (sort (𝜆 u u) x))))
[80, 68, 56, 38, 97, 92] → [56, 80, 97, 92, 68, 38]
[3, 81, 25, 8, 5, 7, 41, 75, 39] → [5, 8, 39, 75, 81, 41, 25, 7, 3]
[46, 85, 95, 0, 38, 4, 66, 35] → [4, 38, 66, 95, 85, 46, 35, 0]
[53, 27, 30, 13, 1, 18, 55] → [13, 27, 53, 55, 30, 18, 1]
[11, 4, 36, 71, 19, 2, 90, 6, 10, 86] → [4, 10, 19, 71, 90, 86, 36, 11, 6, 2]
0.04 14 c226 remove first M and last N elements, M = element 1, N = last element
(𝜆 x (drop (first x) (droplast (last x) x)))
[1, 15, 15, 1, 15, 1, 1] → [15, 15, 1, 15, 1]
[6, 67, 67, 67, 6, 67, 1, 1] → [1]
[5, 64, 64, 5, 83, 83, 83, 83, 8, 5] → [ ]
[1, 14, 61, 49, 2, 12, 98, 4, 4] → [14, 61, 49, 2]
[1, 5, 3, 96, 37, 35, 68, 5, 23, 0] → [5, 3, 96, 37, 35, 68, 5, 23, 0]
0.034 12 c134 remove elements M through N, M = element 1, N = element 2
(𝜆 x (cut_slice (first x) (second x) x))
[3, 4, 9, 6, 91] → [3, 4, 91]
[2, 9, 3, 29, 19, 61, 23, 59, 66, 76] → [2, 76]
[3, 5, 31, 85, 37, 9, 4] → [3, 5, 9, 4]
[1, 8, 0, 65, 95, 28, 3, 7] → [ ]
[2, 4, 0, 7] → [2]
0.03 15 c164 replace each element, M, with M / 4 + 5
(𝜆 x (map (𝜆 y (+ (/ y 4) 5)) x))
[22, 14, 26, 39, 26, 13] → [10, 8, 11, 14, 11, 8]
[6, 50, 18, 72, 7, 84, 94, 0, 46, 8] → [6, 17, 9, 23, 6, 26, 28, 5, 16, 7]
[31] → [12]
[55, 3, 92, 85, 63, 58, 33, 67, 48] → [18, 5, 28, 26, 20, 19, 13, 21, 17]
[8, 2, 42, 59, 95, 97, 3] → [7, 5, 15, 19, 28, 29, 5]
0.02 27 c178 keep only elements followed by an even number
(𝜆 x (map first (filter (𝜆 y (is_even (second y))) (zip (droplast 1 x) (drop 1 x)))))
[27, 4, 9, 71, 45, 69] → [27]
[10, 68, 80, 5, 29, 23, 9, 33, 69] → [10, 68]
[73, 32, 70, 0, 22, 2, 46, 8, 7, 92] → [73, 32, 70, 0, 22, 2, 46, 7]
[19, 81, 1, 53, 85, 3, 97] → [ ]
[40, 2, 91, 28, 61, 0, 55, 4] → [40, 91, 61, 55]
0.018 17 c113 keep only elements whose ones digit is greater than element 1
(𝜆 x (filter (𝜆 y (> (first x) (% y 10))) x))
[3, 91, 59, 91, 60, 6, 44, 2] → [91, 91, 60, 2]
[7, 35, 37, 74, 73, 22, 85, 8, 68, 7] → [35, 74, 73, 22, 85]
[7, 38, 1, 29, 40, 48, 45, 81] → [1, 40, 45, 81]
[2, 93, 68, 36, 41, 8, 27, 20, 8, 50] → [41, 20, 50]
[4, 82, 5, 52, 83, 7, 5, 4, 9] → [82, 52, 83]
0.013 31 c206 keep only elements whose value is between the first two elements
(𝜆 x (filter (𝜆 y (and (> (max (take 2 x)) y) (> y (min (take 2 x))))) x))
[43, 3, 80, 40, 29, 31] → [40, 29, 31]
[1, 63, 2, 7, 48, 9, 97, 4] → [2, 7, 48, 9, 4]
[39, 80, 95, 9, 44, 77, 2, 33, 75, 6] → [44, 77, 75]
[6, 90, 25, 9, 18, 0, 7] → [25, 9, 18, 7]
[87, 5, 71, 7, 3, 19, 8, 22, 56] → [71, 7, 19, 8, 22, 56]
0.01 14 c210 unique elements with last element inserted at index M, where M is element 1
(𝜆 x (insert (last x) (first x) (unique x)))
[2, 9, 57, 6, 9, 6] → [2, 6, 9, 57, 6]
[4, 0, 50, 4, 19, 34, 50, 34, 4, 19] → [4, 0, 50, 19, 19, 34]
[8, 79, 23, 60, 74, 49, 71, 0, 76] → [8, 79, 23, 60, 74, 49, 71, 76, 0, 76]
[2, 99, 87, 2, 87, 99, 87] → [2, 87, 99, 87]
[7, 65, 3, 68, 73, 66, 9, 5] → [7, 65, 3, 68, 73, 66, 5, 9, 5]
0 18 c158 replace each element with 1 if element N equals N, else 0
(𝜆 x (mapi (𝜆 y (𝜆 z (if (== z y) 1 0))) x))
[1, 45, 3, 4, 23, 55] → [1, 0, 1, 1, 0, 0]
[4, 68, 3, 68, 24, 8, 7, 8] → [0, 0, 1, 0, 0, 0, 1, 1]
[84, 2, 29, 7, 35, 2, 4, 8, 9, 31] → [0, 1, 0, 0, 0, 0, 0, 1, 1, 0]
[9, 3, 8, 6, 7, 5, 2] → [0, 0, 0, 0, 0, 0, 0]
[16, 20, 67, 4, 63, 1, 7, 6, 9, 4] → [0, 0, 0, 1, 0, 0, 1, 0, 1, 0]
0 14 c183 list the index minus 1 of elements 2 and following equal to element 1
(𝜆 x (find (== (first x)) (drop 1 x)))
[3, 4, 3, 3, 3, 9, 5, 8] → [2, 3, 4]
[8, 7, 2, 1, 1, 2, 8, 9, 6] → [6]
[2, 2, 2, 2, 5, 2, 5, 4, 4, 5] → [1, 2, 3, 5]
[6, 3, 6, 6, 9, 9, 3, 6, 6, 6] → [2, 3, 7, 8, 9]
[2, 12, 2, 49, 8, 2, 65, 83, 36] → [2, 5]